/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 70349.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 3.0], [2.5, 3.0], [2.6, 3.0], [2.7, 3.0], [2.8, 3.0], [2.9, 3.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 4.0], [3.5, 4.0], [3.6, 4.0], [3.7, 4.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 5.0], [4.9, 5.0], [5.0, 5.0], [5.1, 5.0], [5.2, 5.0], [5.3, 5.0], [5.4, 5.0], [5.5, 5.0], [5.6, 5.0], [5.7, 5.0], [5.8, 5.0], [5.9, 5.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 9.0], [9.4, 9.0], [9.5, 9.0], [9.6, 9.0], [9.7, 9.0], [9.8, 9.0], [9.9, 9.0], [10.0, 9.0], [10.1, 9.0], [10.2, 10.0], [10.3, 10.0], [10.4, 10.0], [10.5, 10.0], [10.6, 10.0], [10.7, 10.0], [10.8, 10.0], [10.9, 10.0], [11.0, 10.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 11.0], [12.0, 12.0], [12.1, 12.0], [12.2, 12.0], [12.3, 12.0], [12.4, 12.0], [12.5, 12.0], [12.6, 12.0], [12.7, 12.0], [12.8, 12.0], [12.9, 13.0], [13.0, 13.0], [13.1, 13.0], [13.2, 13.0], [13.3, 13.0], [13.4, 13.0], [13.5, 13.0], [13.6, 13.0], [13.7, 13.0], [13.8, 13.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 15.0], [14.9, 15.0], [15.0, 15.0], [15.1, 15.0], [15.2, 15.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 16.0], [15.7, 16.0], [15.8, 16.0], [15.9, 16.0], [16.0, 16.0], [16.1, 16.0], [16.2, 16.0], [16.3, 16.0], [16.4, 16.0], [16.5, 17.0], [16.6, 17.0], [16.7, 17.0], [16.8, 17.0], [16.9, 17.0], [17.0, 17.0], [17.1, 17.0], [17.2, 17.0], [17.3, 18.0], [17.4, 18.0], [17.5, 18.0], [17.6, 18.0], [17.7, 18.0], [17.8, 18.0], [17.9, 18.0], [18.0, 18.0], [18.1, 19.0], [18.2, 19.0], [18.3, 19.0], [18.4, 19.0], [18.5, 19.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 20.0], [19.0, 20.0], [19.1, 20.0], [19.2, 20.0], [19.3, 20.0], [19.4, 20.0], [19.5, 20.0], [19.6, 20.0], [19.7, 20.0], [19.8, 21.0], [19.9, 21.0], [20.0, 21.0], [20.1, 21.0], [20.2, 21.0], [20.3, 21.0], [20.4, 21.0], [20.5, 21.0], [20.6, 22.0], [20.7, 22.0], [20.8, 22.0], [20.9, 22.0], [21.0, 22.0], [21.1, 22.0], [21.2, 22.0], [21.3, 22.0], [21.4, 23.0], [21.5, 23.0], [21.6, 23.0], [21.7, 23.0], [21.8, 23.0], [21.9, 23.0], [22.0, 23.0], [22.1, 23.0], [22.2, 24.0], [22.3, 24.0], [22.4, 24.0], [22.5, 24.0], [22.6, 24.0], [22.7, 24.0], [22.8, 24.0], [22.9, 24.0], [23.0, 24.0], [23.1, 25.0], [23.2, 25.0], [23.3, 25.0], [23.4, 25.0], [23.5, 25.0], [23.6, 25.0], [23.7, 25.0], [23.8, 25.0], [23.9, 25.0], [24.0, 26.0], [24.1, 26.0], [24.2, 26.0], [24.3, 26.0], [24.4, 26.0], [24.5, 26.0], [24.6, 26.0], [24.7, 26.0], [24.8, 27.0], [24.9, 27.0], [25.0, 27.0], [25.1, 27.0], [25.2, 27.0], [25.3, 27.0], [25.4, 27.0], [25.5, 27.0], [25.6, 27.0], [25.7, 27.0], [25.8, 28.0], [25.9, 28.0], [26.0, 28.0], [26.1, 28.0], [26.2, 28.0], [26.3, 28.0], [26.4, 28.0], [26.5, 28.0], [26.6, 28.0], [26.7, 29.0], [26.8, 29.0], [26.9, 29.0], [27.0, 29.0], [27.1, 29.0], [27.2, 29.0], [27.3, 29.0], [27.4, 29.0], [27.5, 30.0], [27.6, 30.0], [27.7, 30.0], [27.8, 30.0], [27.9, 30.0], [28.0, 30.0], [28.1, 30.0], [28.2, 30.0], [28.3, 30.0], [28.4, 31.0], [28.5, 31.0], [28.6, 31.0], [28.7, 31.0], [28.8, 31.0], [28.9, 31.0], [29.0, 31.0], [29.1, 31.0], [29.2, 32.0], [29.3, 32.0], [29.4, 32.0], [29.5, 32.0], [29.6, 32.0], [29.7, 32.0], [29.8, 32.0], [29.9, 32.0], [30.0, 32.0], [30.1, 32.0], [30.2, 33.0], [30.3, 33.0], [30.4, 33.0], [30.5, 33.0], [30.6, 33.0], [30.7, 33.0], [30.8, 33.0], [30.9, 33.0], [31.0, 33.0], [31.1, 34.0], [31.2, 34.0], [31.3, 34.0], [31.4, 34.0], [31.5, 34.0], [31.6, 34.0], [31.7, 34.0], [31.8, 34.0], [31.9, 35.0], [32.0, 35.0], [32.1, 35.0], [32.2, 35.0], [32.3, 35.0], [32.4, 35.0], [32.5, 35.0], [32.6, 35.0], [32.7, 35.0], [32.8, 36.0], [32.9, 36.0], [33.0, 36.0], [33.1, 36.0], [33.2, 36.0], [33.3, 36.0], [33.4, 36.0], [33.5, 36.0], [33.6, 37.0], [33.7, 37.0], [33.8, 37.0], [33.9, 37.0], [34.0, 37.0], [34.1, 37.0], [34.2, 37.0], [34.3, 37.0], [34.4, 38.0], [34.5, 38.0], [34.6, 38.0], [34.7, 38.0], [34.8, 38.0], [34.9, 38.0], [35.0, 38.0], [35.1, 38.0], [35.2, 38.0], [35.3, 39.0], [35.4, 39.0], [35.5, 39.0], [35.6, 39.0], [35.7, 39.0], [35.8, 39.0], [35.9, 39.0], [36.0, 39.0], [36.1, 39.0], [36.2, 40.0], [36.3, 40.0], [36.4, 40.0], [36.5, 40.0], [36.6, 40.0], [36.7, 40.0], [36.8, 40.0], [36.9, 40.0], [37.0, 40.0], [37.1, 41.0], [37.2, 41.0], [37.3, 41.0], [37.4, 41.0], [37.5, 41.0], [37.6, 41.0], [37.7, 41.0], [37.8, 41.0], [37.9, 42.0], [38.0, 42.0], [38.1, 42.0], [38.2, 42.0], [38.3, 42.0], [38.4, 42.0], [38.5, 42.0], [38.6, 42.0], [38.7, 42.0], [38.8, 43.0], [38.9, 43.0], [39.0, 43.0], [39.1, 43.0], [39.2, 43.0], [39.3, 43.0], [39.4, 43.0], [39.5, 43.0], [39.6, 44.0], [39.7, 44.0], [39.8, 44.0], [39.9, 44.0], [40.0, 44.0], [40.1, 44.0], [40.2, 44.0], [40.3, 44.0], [40.4, 44.0], [40.5, 45.0], [40.6, 45.0], [40.7, 45.0], [40.8, 45.0], [40.9, 45.0], [41.0, 45.0], [41.1, 45.0], [41.2, 45.0], [41.3, 45.0], [41.4, 46.0], [41.5, 46.0], [41.6, 46.0], [41.7, 46.0], [41.8, 46.0], [41.9, 46.0], [42.0, 46.0], [42.1, 46.0], [42.2, 47.0], [42.3, 47.0], [42.4, 47.0], [42.5, 47.0], [42.6, 47.0], [42.7, 47.0], [42.8, 47.0], [42.9, 47.0], [43.0, 47.0], [43.1, 48.0], [43.2, 48.0], [43.3, 48.0], [43.4, 48.0], [43.5, 48.0], [43.6, 48.0], [43.7, 48.0], [43.8, 48.0], [43.9, 48.0], [44.0, 49.0], [44.1, 49.0], [44.2, 49.0], [44.3, 49.0], [44.4, 49.0], [44.5, 49.0], [44.6, 49.0], [44.7, 49.0], [44.8, 49.0], [44.9, 50.0], [45.0, 50.0], [45.1, 50.0], [45.2, 50.0], [45.3, 50.0], [45.4, 50.0], [45.5, 50.0], [45.6, 50.0], [45.7, 50.0], [45.8, 51.0], [45.9, 51.0], [46.0, 51.0], [46.1, 51.0], [46.2, 51.0], [46.3, 51.0], [46.4, 51.0], [46.5, 51.0], [46.6, 52.0], [46.7, 52.0], [46.8, 52.0], [46.9, 52.0], [47.0, 52.0], [47.1, 52.0], [47.2, 52.0], [47.3, 52.0], [47.4, 52.0], [47.5, 53.0], [47.6, 53.0], [47.7, 53.0], [47.8, 53.0], [47.9, 53.0], [48.0, 53.0], [48.1, 53.0], [48.2, 53.0], [48.3, 54.0], [48.4, 54.0], [48.5, 54.0], [48.6, 54.0], [48.7, 54.0], [48.8, 54.0], [48.9, 54.0], [49.0, 55.0], [49.1, 55.0], [49.2, 55.0], [49.3, 55.0], [49.4, 55.0], [49.5, 55.0], [49.6, 55.0], [49.7, 55.0], [49.8, 56.0], [49.9, 56.0], [50.0, 56.0], [50.1, 56.0], [50.2, 56.0], [50.3, 56.0], [50.4, 56.0], [50.5, 56.0], [50.6, 57.0], [50.7, 57.0], [50.8, 57.0], [50.9, 57.0], [51.0, 57.0], [51.1, 57.0], [51.2, 57.0], [51.3, 58.0], [51.4, 58.0], [51.5, 58.0], [51.6, 58.0], [51.7, 58.0], [51.8, 58.0], [51.9, 58.0], [52.0, 59.0], [52.1, 59.0], [52.2, 59.0], [52.3, 59.0], [52.4, 59.0], [52.5, 59.0], [52.6, 59.0], [52.7, 60.0], [52.8, 60.0], [52.9, 60.0], [53.0, 60.0], [53.1, 60.0], [53.2, 60.0], [53.3, 61.0], [53.4, 61.0], [53.5, 61.0], [53.6, 61.0], [53.7, 61.0], [53.8, 61.0], [53.9, 61.0], [54.0, 62.0], [54.1, 62.0], [54.2, 62.0], [54.3, 62.0], [54.4, 62.0], [54.5, 62.0], [54.6, 63.0], [54.7, 63.0], [54.8, 63.0], [54.9, 63.0], [55.0, 63.0], [55.1, 63.0], [55.2, 63.0], [55.3, 64.0], [55.4, 64.0], [55.5, 64.0], [55.6, 64.0], [55.7, 64.0], [55.8, 64.0], [55.9, 65.0], [56.0, 65.0], [56.1, 65.0], [56.2, 65.0], [56.3, 65.0], [56.4, 66.0], [56.5, 66.0], [56.6, 66.0], [56.7, 66.0], [56.8, 66.0], [56.9, 66.0], [57.0, 67.0], [57.1, 67.0], [57.2, 67.0], [57.3, 67.0], [57.4, 67.0], [57.5, 68.0], [57.6, 68.0], [57.7, 68.0], [57.8, 68.0], [57.9, 68.0], [58.0, 69.0], [58.1, 69.0], [58.2, 69.0], [58.3, 69.0], [58.4, 69.0], [58.5, 70.0], [58.6, 70.0], [58.7, 70.0], [58.8, 70.0], [58.9, 70.0], [59.0, 71.0], [59.1, 71.0], [59.2, 71.0], [59.3, 71.0], [59.4, 71.0], [59.5, 72.0], [59.6, 72.0], [59.7, 72.0], [59.8, 72.0], [59.9, 72.0], [60.0, 73.0], [60.1, 73.0], [60.2, 73.0], [60.3, 73.0], [60.4, 74.0], [60.5, 74.0], [60.6, 74.0], [60.7, 74.0], [60.8, 74.0], [60.9, 75.0], [61.0, 75.0], [61.1, 75.0], [61.2, 76.0], [61.3, 76.0], [61.4, 76.0], [61.5, 76.0], [61.6, 77.0], [61.7, 77.0], [61.8, 77.0], [61.9, 78.0], [62.0, 78.0], [62.1, 78.0], [62.2, 79.0], [62.3, 79.0], [62.4, 79.0], [62.5, 79.0], [62.6, 80.0], [62.7, 80.0], [62.8, 80.0], [62.9, 81.0], [63.0, 81.0], [63.1, 81.0], [63.2, 82.0], [63.3, 82.0], [63.4, 82.0], [63.5, 83.0], [63.6, 83.0], [63.7, 83.0], [63.8, 84.0], [63.9, 84.0], [64.0, 84.0], [64.1, 85.0], [64.2, 85.0], [64.3, 86.0], [64.4, 86.0], [64.5, 86.0], [64.6, 87.0], [64.7, 87.0], [64.8, 88.0], [64.9, 88.0], [65.0, 88.0], [65.1, 89.0], [65.2, 89.0], [65.3, 89.0], [65.4, 90.0], [65.5, 90.0], [65.6, 91.0], [65.7, 91.0], [65.8, 91.0], [65.9, 92.0], [66.0, 92.0], [66.1, 93.0], [66.2, 93.0], [66.3, 93.0], [66.4, 93.0], [66.5, 94.0], [66.6, 94.0], [66.7, 95.0], [66.8, 95.0], [66.9, 95.0], [67.0, 96.0], [67.1, 96.0], [67.2, 97.0], [67.3, 97.0], [67.4, 98.0], [67.5, 98.0], [67.6, 99.0], [67.7, 99.0], [67.8, 100.0], [67.9, 101.0], [68.0, 101.0], [68.1, 102.0], [68.2, 102.0], [68.3, 103.0], [68.4, 103.0], [68.5, 104.0], [68.6, 104.0], [68.7, 105.0], [68.8, 106.0], [68.9, 106.0], [69.0, 107.0], [69.1, 108.0], [69.2, 108.0], [69.3, 109.0], [69.4, 110.0], [69.5, 110.0], [69.6, 111.0], [69.7, 112.0], [69.8, 113.0], [69.9, 114.0], [70.0, 114.0], [70.1, 115.0], [70.2, 116.0], [70.3, 117.0], [70.4, 118.0], [70.5, 119.0], [70.6, 120.0], [70.7, 121.0], [70.8, 122.0], [70.9, 123.0], [71.0, 125.0], [71.1, 127.0], [71.2, 128.0], [71.3, 129.0], [71.4, 130.0], [71.5, 132.0], [71.6, 134.0], [71.7, 137.0], [71.8, 139.0], [71.9, 142.0], [72.0, 144.0], [72.1, 147.0], [72.2, 149.0], [72.3, 151.0], [72.4, 154.0], [72.5, 157.0], [72.6, 160.0], [72.7, 164.0], [72.8, 169.0], [72.9, 175.0], [73.0, 179.0], [73.1, 185.0], [73.2, 190.0], [73.3, 199.0], [73.4, 206.0], [73.5, 211.0], [73.6, 218.0], [73.7, 225.0], [73.8, 230.0], [73.9, 236.0], [74.0, 244.0], [74.1, 251.0], [74.2, 257.0], [74.3, 262.0], [74.4, 266.0], [74.5, 272.0], [74.6, 280.0], [74.7, 291.0], [74.8, 300.0], [74.9, 319.0], [75.0, 333.0], [75.1, 346.0], [75.2, 358.0], [75.3, 371.0], [75.4, 385.0], [75.5, 400.0], [75.6, 420.0], [75.7, 442.0], [75.8, 460.0], [75.9, 472.0], [76.0, 491.0], [76.1, 506.0], [76.2, 537.0], [76.3, 577.0], [76.4, 622.0], [76.5, 674.0], [76.6, 722.0], [76.7, 770.0], [76.8, 853.0], [76.9, 889.0], [77.0, 916.0], [77.1, 936.0], [77.2, 953.0], [77.3, 972.0], [77.4, 986.0], [77.5, 993.0], [77.6, 1002.0], [77.7, 1010.0], [77.8, 1015.0], [77.9, 1024.0], [78.0, 1031.0], [78.1, 1039.0], [78.2, 1047.0], [78.3, 1051.0], [78.4, 1055.0], [78.5, 1061.0], [78.6, 1068.0], [78.7, 1074.0], [78.8, 1083.0], [78.9, 1090.0], [79.0, 1095.0], [79.1, 1101.0], [79.2, 1106.0], [79.3, 1113.0], [79.4, 1119.0], [79.5, 1125.0], [79.6, 1132.0], [79.7, 1145.0], [79.8, 1152.0], [79.9, 1160.0], [80.0, 1170.0], [80.1, 1179.0], [80.2, 1186.0], [80.3, 1198.0], [80.4, 1207.0], [80.5, 1216.0], [80.6, 1227.0], [80.7, 1238.0], [80.8, 1247.0], [80.9, 1254.0], [81.0, 1262.0], [81.1, 1269.0], [81.2, 1277.0], [81.3, 1287.0], [81.4, 1297.0], [81.5, 1306.0], [81.6, 1314.0], [81.7, 1321.0], [81.8, 1332.0], [81.9, 1342.0], [82.0, 1353.0], [82.1, 1368.0], [82.2, 1382.0], [82.3, 1395.0], [82.4, 1405.0], [82.5, 1422.0], [82.6, 1436.0], [82.7, 1445.0], [82.8, 1455.0], [82.9, 1467.0], [83.0, 1476.0], [83.1, 1484.0], [83.2, 1491.0], [83.3, 1501.0], [83.4, 1514.0], [83.5, 1529.0], [83.6, 1539.0], [83.7, 1551.0], [83.8, 1559.0], [83.9, 1571.0], [84.0, 1582.0], [84.1, 1595.0], [84.2, 1608.0], [84.3, 1624.0], [84.4, 1638.0], [84.5, 1651.0], [84.6, 1666.0], [84.7, 1683.0], [84.8, 1705.0], [84.9, 1721.0], [85.0, 1734.0], [85.1, 1752.0], [85.2, 1766.0], [85.3, 1780.0], [85.4, 1806.0], [85.5, 1844.0], [85.6, 1878.0], [85.7, 1894.0], [85.8, 1906.0], [85.9, 1923.0], [86.0, 1941.0], [86.1, 1962.0], [86.2, 1985.0], [86.3, 2003.0], [86.4, 2033.0], [86.5, 2057.0], [86.6, 2086.0], [86.7, 2127.0], [86.8, 2161.0], [86.9, 2186.0], [87.0, 2225.0], [87.1, 2262.0], [87.2, 2295.0], [87.3, 2323.0], [87.4, 2394.0], [87.5, 2417.0], [87.6, 2451.0], [87.7, 2478.0], [87.8, 2508.0], [87.9, 2545.0], [88.0, 2585.0], [88.1, 2628.0], [88.2, 2656.0], [88.3, 2688.0], [88.4, 2723.0], [88.5, 2760.0], [88.6, 2798.0], [88.7, 2845.0], [88.8, 2877.0], [88.9, 2913.0], [89.0, 2942.0], [89.1, 2981.0], [89.2, 3031.0], [89.3, 3067.0], [89.4, 3123.0], [89.5, 3189.0], [89.6, 3252.0], [89.7, 3302.0], [89.8, 3341.0], [89.9, 3367.0], [90.0, 3410.0], [90.1, 3441.0], [90.2, 3472.0], [90.3, 3500.0], [90.4, 3528.0], [90.5, 3557.0], [90.6, 3582.0], [90.7, 3632.0], [90.8, 3674.0], [90.9, 3724.0], [91.0, 3775.0], [91.1, 3825.0], [91.2, 3885.0], [91.3, 3927.0], [91.4, 3974.0], [91.5, 4031.0], [91.6, 4076.0], [91.7, 4098.0], [91.8, 4160.0], [91.9, 4199.0], [92.0, 4249.0], [92.1, 4306.0], [92.2, 4374.0], [92.3, 4432.0], [92.4, 4476.0], [92.5, 4518.0], [92.6, 4543.0], [92.7, 4595.0], [92.8, 4644.0], [92.9, 4721.0], [93.0, 4788.0], [93.1, 4858.0], [93.2, 4920.0], [93.3, 4965.0], [93.4, 4996.0], [93.5, 5025.0], [93.6, 5055.0], [93.7, 5089.0], [93.8, 5134.0], [93.9, 5192.0], [94.0, 5246.0], [94.1, 5304.0], [94.2, 5354.0], [94.3, 5405.0], [94.4, 5479.0], [94.5, 5543.0], [94.6, 5587.0], [94.7, 5654.0], [94.8, 5752.0], [94.9, 5837.0], [95.0, 5925.0], [95.1, 5997.0], [95.2, 6101.0], [95.3, 6168.0], [95.4, 6312.0], [95.5, 6356.0], [95.6, 6471.0], [95.7, 6580.0], [95.8, 6772.0], [95.9, 6880.0], [96.0, 7006.0], [96.1, 7128.0], [96.2, 7264.0], [96.3, 7423.0], [96.4, 7610.0], [96.5, 7820.0], [96.6, 8055.0], [96.7, 8316.0], [96.8, 8529.0], [96.9, 8747.0], [97.0, 9024.0], [97.1, 9288.0], [97.2, 9731.0], [97.3, 10320.0], [97.4, 10927.0], [97.5, 11385.0], [97.6, 11585.0], [97.7, 11932.0], [97.8, 12195.0], [97.9, 12426.0], [98.0, 12775.0], [98.1, 13141.0], [98.2, 13411.0], [98.3, 13697.0], [98.4, 13981.0], [98.5, 14159.0], [98.6, 14398.0], [98.7, 14754.0], [98.8, 15031.0], [98.9, 15470.0], [99.0, 16193.0], [99.1, 16815.0], [99.2, 17277.0], [99.3, 18184.0], [99.4, 18963.0], [99.5, 19744.0], [99.6, 20261.0], [99.7, 21595.0], [99.8, 25994.0], [99.9, 34007.0], [100.0, 70349.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 67704.0, "series": [{"data": [[0.0, 67704.0], [100.0, 5606.0], [32900.0, 3.0], [33300.0, 2.0], [34500.0, 2.0], [33700.0, 4.0], [36500.0, 2.0], [35700.0, 2.0], [35300.0, 5.0], [37300.0, 1.0], [48500.0, 1.0], [50900.0, 7.0], [200.0, 1482.0], [300.0, 705.0], [400.0, 567.0], [500.0, 275.0], [600.0, 190.0], [700.0, 193.0], [800.0, 216.0], [900.0, 634.0], [1000.0, 1510.0], [1100.0, 1239.0], [1200.0, 1113.0], [1300.0, 912.0], [1400.0, 949.0], [1500.0, 837.0], [1600.0, 636.0], [1700.0, 609.0], [1800.0, 352.0], [1900.0, 563.0], [2000.0, 346.0], [2100.0, 286.0], [2300.0, 222.0], [2200.0, 286.0], [2400.0, 347.0], [2500.0, 248.0], [2600.0, 303.0], [2800.0, 253.0], [2700.0, 282.0], [2900.0, 258.0], [3000.0, 253.0], [3100.0, 140.0], [3300.0, 294.0], [3200.0, 175.0], [3400.0, 311.0], [3500.0, 350.0], [3700.0, 189.0], [3600.0, 216.0], [3800.0, 176.0], [3900.0, 221.0], [4000.0, 255.0], [4100.0, 199.0], [4200.0, 187.0], [4300.0, 155.0], [68100.0, 1.0], [4600.0, 167.0], [4500.0, 265.0], [4400.0, 201.0], [4800.0, 136.0], [4700.0, 150.0], [4900.0, 255.0], [5000.0, 306.0], [5100.0, 200.0], [5200.0, 169.0], [5300.0, 187.0], [5400.0, 160.0], [5600.0, 116.0], [5500.0, 186.0], [5700.0, 120.0], [5800.0, 109.0], [6100.0, 128.0], [5900.0, 131.0], [6000.0, 96.0], [6200.0, 68.0], [6300.0, 147.0], [6500.0, 78.0], [6400.0, 87.0], [6600.0, 34.0], [6800.0, 92.0], [6900.0, 77.0], [6700.0, 87.0], [7000.0, 67.0], [7100.0, 86.0], [7200.0, 79.0], [7400.0, 50.0], [7300.0, 54.0], [7600.0, 45.0], [7500.0, 64.0], [7700.0, 52.0], [7800.0, 31.0], [7900.0, 31.0], [8000.0, 63.0], [8100.0, 35.0], [8400.0, 44.0], [8300.0, 41.0], [8500.0, 58.0], [8700.0, 51.0], [8600.0, 36.0], [8200.0, 40.0], [8800.0, 40.0], [9000.0, 46.0], [8900.0, 25.0], [9100.0, 34.0], [9200.0, 35.0], [9400.0, 18.0], [9700.0, 18.0], [9300.0, 22.0], [9500.0, 32.0], [9600.0, 18.0], [10200.0, 14.0], [10000.0, 10.0], [9800.0, 26.0], [9900.0, 18.0], [10100.0, 15.0], [10400.0, 20.0], [10300.0, 19.0], [10600.0, 8.0], [10700.0, 21.0], [10500.0, 14.0], [11200.0, 26.0], [11100.0, 15.0], [10800.0, 13.0], [11000.0, 24.0], [10900.0, 41.0], [11300.0, 11.0], [11400.0, 46.0], [11500.0, 55.0], [11700.0, 44.0], [11600.0, 24.0], [12000.0, 40.0], [11900.0, 38.0], [12200.0, 40.0], [11800.0, 16.0], [12100.0, 31.0], [12300.0, 54.0], [12600.0, 43.0], [12400.0, 15.0], [12700.0, 30.0], [12500.0, 33.0], [12800.0, 46.0], [13200.0, 53.0], [12900.0, 19.0], [13300.0, 39.0], [13100.0, 13.0], [13000.0, 11.0], [13400.0, 22.0], [13500.0, 30.0], [13700.0, 24.0], [13600.0, 54.0], [13800.0, 33.0], [14100.0, 58.0], [14300.0, 26.0], [14200.0, 61.0], [13900.0, 45.0], [14000.0, 51.0], [14700.0, 72.0], [14600.0, 12.0], [14500.0, 33.0], [14800.0, 25.0], [14400.0, 15.0], [14900.0, 22.0], [15000.0, 34.0], [15200.0, 10.0], [15300.0, 24.0], [15100.0, 37.0], [15700.0, 6.0], [15800.0, 18.0], [15400.0, 32.0], [15600.0, 15.0], [15500.0, 16.0], [16000.0, 9.0], [16200.0, 37.0], [16300.0, 19.0], [16100.0, 12.0], [15900.0, 11.0], [16600.0, 11.0], [16400.0, 5.0], [17200.0, 18.0], [17000.0, 33.0], [16800.0, 38.0], [17400.0, 14.0], [18400.0, 4.0], [18000.0, 17.0], [18200.0, 42.0], [17800.0, 7.0], [17600.0, 3.0], [18600.0, 16.0], [19000.0, 27.0], [19200.0, 20.0], [19400.0, 7.0], [18800.0, 13.0], [20000.0, 18.0], [19800.0, 18.0], [19600.0, 4.0], [20400.0, 13.0], [20200.0, 30.0], [20800.0, 3.0], [20600.0, 9.0], [21000.0, 2.0], [21400.0, 3.0], [21200.0, 3.0], [22000.0, 2.0], [22200.0, 3.0], [21800.0, 12.0], [22400.0, 3.0], [21600.0, 3.0], [22600.0, 2.0], [23400.0, 4.0], [22800.0, 3.0], [23200.0, 9.0], [24200.0, 2.0], [23600.0, 4.0], [24000.0, 3.0], [25400.0, 1.0], [24800.0, 2.0], [25600.0, 1.0], [27600.0, 1.0], [27000.0, 1.0], [27400.0, 1.0], [28000.0, 1.0], [29600.0, 3.0], [29200.0, 2.0], [29400.0, 2.0], [29000.0, 1.0], [30000.0, 4.0], [30400.0, 4.0], [31000.0, 1.0], [30800.0, 1.0], [31400.0, 3.0], [31600.0, 2.0], [31800.0, 2.0], [32200.0, 7.0], [32400.0, 3.0], [33600.0, 1.0], [34000.0, 2.0], [34400.0, 3.0], [35200.0, 3.0], [36400.0, 1.0], [37600.0, 4.0], [38400.0, 1.0], [40400.0, 1.0], [42800.0, 1.0], [46400.0, 6.0], [46800.0, 3.0], [48800.0, 1.0], [50800.0, 2.0], [57200.0, 1.0], [60800.0, 4.0], [61200.0, 1.0], [65200.0, 1.0], [67200.0, 1.0], [68000.0, 1.0], [70300.0, 1.0], [33900.0, 1.0], [33500.0, 1.0], [33100.0, 1.0], [36300.0, 2.0], [37500.0, 1.0], [40300.0, 1.0], [43500.0, 1.0], [50700.0, 2.0], [49900.0, 3.0], [50300.0, 2.0], [54700.0, 2.0], [58700.0, 2.0], [60700.0, 3.0], [16900.0, 13.0], [16500.0, 14.0], [17300.0, 21.0], [16700.0, 6.0], [17100.0, 9.0], [17900.0, 5.0], [18300.0, 10.0], [18100.0, 10.0], [17500.0, 11.0], [17700.0, 6.0], [18700.0, 5.0], [19100.0, 8.0], [19300.0, 6.0], [18900.0, 10.0], [18500.0, 4.0], [19700.0, 14.0], [19500.0, 21.0], [20100.0, 8.0], [19900.0, 22.0], [20300.0, 9.0], [21100.0, 11.0], [21300.0, 13.0], [20500.0, 8.0], [20700.0, 7.0], [20900.0, 6.0], [21500.0, 6.0], [22100.0, 1.0], [22300.0, 4.0], [22500.0, 3.0], [21900.0, 2.0], [21700.0, 3.0], [23500.0, 9.0], [23100.0, 3.0], [23300.0, 5.0], [22900.0, 2.0], [24100.0, 2.0], [24300.0, 4.0], [23700.0, 1.0], [23900.0, 1.0], [25100.0, 2.0], [25300.0, 1.0], [24900.0, 2.0], [25900.0, 1.0], [27100.0, 1.0], [26900.0, 1.0], [28300.0, 2.0], [27900.0, 2.0], [28100.0, 1.0], [29500.0, 2.0], [29100.0, 2.0], [28700.0, 2.0], [30100.0, 3.0], [30500.0, 3.0], [30300.0, 1.0], [29900.0, 3.0], [30700.0, 2.0], [29700.0, 2.0], [31300.0, 1.0], [30900.0, 1.0], [31700.0, 1.0], [31100.0, 3.0], [31500.0, 1.0], [32300.0, 3.0], [31900.0, 3.0], [32500.0, 1.0], [33400.0, 4.0], [33800.0, 1.0], [34200.0, 4.0], [35000.0, 1.0], [36200.0, 3.0], [36600.0, 1.0], [35400.0, 1.0], [37800.0, 1.0], [37400.0, 1.0], [39800.0, 5.0], [42600.0, 1.0], [41400.0, 1.0], [48600.0, 1.0], [50600.0, 1.0], [50200.0, 1.0], [59000.0, 1.0], [66800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 70300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6397.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 74246.0, "series": [{"data": [[0.0, 74246.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6397.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10714.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 8643.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 531.0578421988145, "minX": 1.6457526E12, "maxY": 825.4387286422907, "series": [{"data": [[1.64575272E12, 531.0578421988145], [1.6457526E12, 604.3842514811178], [1.64575266E12, 825.4387286422907]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64575272E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 26992.0, "series": [{"data": [[2.0, 413.6081081081081], [3.0, 565.6274509803922], [4.0, 514.7368421052632], [5.0, 26992.0], [6.0, 667.375], [7.0, 848.4499999999999], [8.0, 1012.2857142857142], [9.0, 2.0], [10.0, 2.526315789473684], [11.0, 212.65789473684194], [12.0, 779.9062499999997], [13.0, 206.46666666666675], [14.0, 1.0], [15.0, 855.4594594594594], [16.0, 1.4], [17.0, 2.8000000000000003], [18.0, 1.7599999999999998], [19.0, 2.0], [21.0, 1.6666666666666667], [22.0, 2.0], [23.0, 1.8703703703703702], [24.0, 2.142857142857143], [25.0, 2.059701492537313], [26.0, 2.1707317073170724], [27.0, 2.5333333333333328], [29.0, 2.9999999999999996], [30.0, 3.3333333333333335], [31.0, 3.2923076923076926], [33.0, 3.875], [32.0, 2.864864864864865], [35.0, 187.0], [34.0, 1069.363636363636], [36.0, 413.51351351351354], [39.0, 3.90625], [38.0, 4.2], [41.0, 5.647058823529412], [40.0, 4.481481481481483], [43.0, 3.6666666666666665], [42.0, 6.0], [45.0, 5.75], [44.0, 5.076923076923077], [47.0, 4.0], [46.0, 4.857142857142857], [48.0, 5.555555555555555], [51.0, 9.0], [50.0, 4.833333333333333], [53.0, 5.666666666666667], [52.0, 5.862745098039215], [55.0, 6.428571428571429], [54.0, 5.304347826086956], [57.0, 6.5], [56.0, 6.0], [59.0, 6.916666666666668], [58.0, 7.055555555555555], [61.0, 8.514285714285714], [60.0, 7.857142857142858], [63.0, 7.666666666666667], [62.0, 10.190476190476192], [67.0, 13.647058823529413], [66.0, 12.153846153846153], [65.0, 11.833333333333332], [64.0, 12.687500000000002], [71.0, 10.785714285714286], [70.0, 8.545454545454545], [69.0, 8.0], [68.0, 16.27586206896552], [75.0, 13.368421052631579], [74.0, 11.029411764705884], [73.0, 6.857142857142858], [72.0, 14.166666666666666], [79.0, 14.375000000000002], [78.0, 13.764705882352942], [76.0, 13.666666666666666], [77.0, 10.0], [83.0, 14.333333333333334], [82.0, 18.64705882352942], [81.0, 21.9375], [80.0, 12.0], [87.0, 29.799999999999997], [86.0, 7.333333333333333], [85.0, 8.5], [84.0, 20.86206896551725], [91.0, 17.05555555555555], [90.0, 12.5], [89.0, 33.57142857142858], [88.0, 38.099999999999994], [95.0, 17.2], [94.0, 12.0], [93.0, 18.133333333333333], [92.0, 15.277777777777777], [97.0, 21.0], [96.0, 17.85185185185185], [103.0, 319.76], [102.0, 29.900000000000006], [101.0, 15.486486486486486], [100.0, 19.384615384615387], [107.0, 39.58620689655172], [106.0, 48.18181818181818], [104.0, 43.41176470588236], [111.0, 50.6], [110.0, 35.11764705882353], [109.0, 33.75], [108.0, 32.75], [115.0, 15.454545454545455], [114.0, 11.518518518518517], [113.0, 16.909090909090907], [112.0, 27.555555555555557], [119.0, 25.781249999999996], [118.0, 19.75], [117.0, 22.888888888888886], [116.0, 16.75], [123.0, 25.105263157894743], [122.0, 11.0], [121.0, 27.142857142857142], [120.0, 20.575757575757574], [127.0, 16.533333333333335], [126.0, 17.82758620689656], [125.0, 10.25], [124.0, 14.0], [135.0, 17.61111111111111], [133.0, 23.0], [132.0, 17.680000000000003], [131.0, 21.764705882352942], [130.0, 26.0], [129.0, 26.285714285714285], [128.0, 24.437499999999996], [143.0, 19.5], [142.0, 22.714285714285715], [141.0, 17.5], [140.0, 21.81818181818182], [139.0, 29.923076923076923], [138.0, 24.2], [137.0, 26.116279069767444], [136.0, 17.357142857142854], [151.0, 42.85714285714286], [150.0, 43.29629629629629], [149.0, 21.363636363636367], [148.0, 23.714285714285715], [147.0, 28.303797468354425], [146.0, 21.27777777777778], [145.0, 21.54285714285714], [144.0, 20.5], [159.0, 22.22222222222222], [158.0, 20.5], [157.0, 22.81132075471698], [156.0, 18.28070175438597], [155.0, 46.75], [154.0, 48.375], [153.0, 41.8], [152.0, 40.08695652173913], [167.0, 24.333333333333332], [166.0, 29.555555555555557], [165.0, 28.09090909090909], [164.0, 26.000000000000004], [163.0, 17.0], [162.0, 22.478260869565226], [161.0, 24.75], [160.0, 17.5], [175.0, 16.0], [174.0, 22.06521739130435], [173.0, 640.080459770115], [172.0, 29.0], [171.0, 21.538461538461537], [170.0, 25.77777777777778], [169.0, 20.61111111111111], [168.0, 29.49230769230769], [183.0, 31.125], [182.0, 30.555555555555557], [181.0, 28.33823529411764], [180.0, 32.0], [179.0, 32.36363636363637], [178.0, 27.142857142857142], [177.0, 21.90697674418605], [176.0, 23.333333333333332], [191.0, 29.952380952380953], [190.0, 33.0], [189.0, 30.33333333333334], [188.0, 25.333333333333336], [187.0, 23.333333333333332], [186.0, 25.901960784313726], [185.0, 32.0], [184.0, 25.374999999999996], [199.0, 20.166666666666668], [198.0, 24.142857142857146], [197.0, 16.0], [196.0, 15.571428571428571], [195.0, 16.166666666666668], [194.0, 17.500000000000007], [193.0, 21.673469387755105], [192.0, 28.4], [201.0, 61.3], [205.0, 39.0], [204.0, 32.96969696969696], [203.0, 32.08333333333332], [202.0, 28.062499999999996], [206.0, 30.333333333333343], [200.0, 25.0], [208.0, 37.924528301886795], [214.0, 43.27499999999999], [213.0, 59.777777777777786], [212.0, 90.33333333333334], [211.0, 89.88235294117648], [210.0, 49.66666666666666], [209.0, 66.57894736842105], [215.0, 36.66153846153846], [218.0, 35.61111111111111], [217.0, 114.9154929577465], [219.0, 15.923076923076923], [216.0, 108.01851851851859], [220.0, 18.584615384615386], [223.0, 15.55284552845529], [221.0, 19.8], [222.0, 25.333333333333332], [224.0, 26.767955801104986], [231.0, 80.26785714285717], [230.0, 46.98076923076921], [229.0, 23.249999999999996], [228.0, 33.486486486486484], [226.0, 21.833333333333332], [225.0, 30.297297297297295], [227.0, 34.55555555555556], [239.0, 32.57142857142857], [238.0, 41.307692307692314], [237.0, 103.19230769230774], [236.0, 105.40816326530613], [235.0, 72.83636363636367], [233.0, 128.22222222222226], [232.0, 49.155172413793075], [234.0, 32.82051282051282], [244.0, 40.60869565217391], [245.0, 18.018461538461544], [243.0, 32.1891891891892], [241.0, 34.459016393442624], [246.0, 21.2831215970962], [247.0, 108.0], [242.0, 28.0], [240.0, 26.333333333333332], [248.0, 30.54], [249.0, 14.77669902912621], [250.0, 16.564102564102562], [251.0, 36.1], [252.0, 21.77777777777778], [253.0, 31.366666666666667], [254.0, 30.200000000000003], [255.0, 41.17499999999999], [257.0, 31.03812316715543], [256.0, 38.50000000000001], [258.0, 69.10416666666669], [259.0, 90.53448275862073], [260.0, 184.48000000000005], [261.0, 90.40192307692305], [262.0, 36.417886178861764], [263.0, 18.95833333333332], [264.0, 28.33846153846154], [265.0, 32.3125], [270.0, 7.555555555555555], [271.0, 22.241935483870957], [268.0, 34.18], [269.0, 30.628205128205124], [266.0, 31.10000000000001], [267.0, 26.290322580645167], [273.0, 18.826086956521742], [272.0, 27.19047619047619], [274.0, 26.100000000000005], [275.0, 11.372881355932202], [276.0, 26.640000000000004], [277.0, 27.77499999999999], [278.0, 21.933333333333334], [279.0, 28.25], [280.0, 23.660714285714285], [286.0, 16.961352657004824], [287.0, 27.06293706293706], [284.0, 25.522875816993462], [285.0, 14.537037037037045], [281.0, 8.64406779661017], [282.0, 34.666666666666664], [283.0, 30.48453608247424], [289.0, 9.443478260869561], [288.0, 23.966666666666665], [290.0, 16.119658119658123], [291.0, 15.04615384615385], [292.0, 31.060000000000006], [293.0, 17.7867298578199], [294.0, 18.38495575221239], [295.0, 26.250000000000004], [296.0, 16.945945945945954], [302.0, 22.546075085324233], [303.0, 28.223880597014933], [300.0, 67.18750000000003], [301.0, 46.33333333333333], [297.0, 35.27467811158796], [298.0, 28.339285714285744], [299.0, 43.550087873462225], [307.0, 17.73611111111111], [305.0, 34.127127127127125], [304.0, 17.546666666666678], [306.0, 29.978021978021985], [310.0, 36.39622641509434], [309.0, 42.41666666666667], [308.0, 75.38709677419357], [311.0, 24.0], [312.0, 31.28160919540232], [313.0, 64.85436893203884], [315.0, 57.40540540540543], [314.0, 24.904761904761905], [319.0, 46.5084745762712], [318.0, 66.6], [317.0, 25.71428571428571], [316.0, 66.39473684210526], [321.0, 15.671532846715321], [320.0, 22.27272727272727], [322.0, 23.838709677419352], [323.0, 14.399999999999997], [324.0, 28.555555555555557], [325.0, 35.84615384615385], [326.0, 23.23628691983122], [327.0, 57.671875], [335.0, 50.1875], [329.0, 45.13333333333333], [328.0, 71.16666666666666], [331.0, 42.8], [330.0, 45.315789473684205], [334.0, 48.94444444444444], [333.0, 49.73809523809524], [332.0, 46.166666666666664], [343.0, 36.86486486486485], [339.0, 45.93023255813953], [338.0, 42.599999999999994], [337.0, 53.77777777777778], [336.0, 47.8], [340.0, 51.791489361702155], [341.0, 44.31034482758621], [342.0, 38.28985507246376], [344.0, 45.27692307692307], [345.0, 49.62162162162164], [346.0, 49.40643274853806], [347.0, 51.0], [348.0, 66.58064516129032], [349.0, 54.288288288288285], [351.0, 52.88888888888889], [350.0, 52.22368421052631], [352.0, 53.97560975609755], [355.0, 30.85975164353543], [364.0, 67.64705882352942], [367.0, 68.77083333333331], [366.0, 53.81818181818182], [365.0, 50.291666666666664], [354.0, 44.91666666666666], [353.0, 53.37499999999999], [356.0, 75.79999999999998], [357.0, 49.33333333333335], [358.0, 48.86363636363635], [359.0, 70.00000000000001], [361.0, 42.551122194513745], [362.0, 105.59231905465303], [363.0, 58.44827586206897], [360.0, 135.55625000000006], [375.0, 33.43373493975903], [373.0, 45.295081967213115], [374.0, 47.69662921348313], [372.0, 106.7948717948718], [371.0, 98.34210526315789], [370.0, 92.09999999999997], [376.0, 31.291536050156747], [382.0, 47.22727272727273], [383.0, 45.85416666666666], [381.0, 46.55263157894737], [380.0, 39.79999999999999], [377.0, 32.21752265861031], [379.0, 43.27142857142857], [378.0, 46.77729257641923], [369.0, 61.20833333333334], [368.0, 60.38596491228073], [398.0, 32.25], [397.0, 47.8], [394.0, 37.10344827586207], [393.0, 225.84615384615384], [395.0, 55.26415094339624], [392.0, 269.86486486486484], [399.0, 48.41721854304637], [391.0, 31.078651685393275], [390.0, 40.31007751937985], [389.0, 44.122807017543856], [388.0, 53.77777777777777], [385.0, 51.39240506329112], [384.0, 45.22413793103449], [387.0, 49.12121212121213], [386.0, 53.15789473684212], [396.0, 58.333333333333336], [413.0, 20.287499999999994], [412.0, 58.06808510638295], [403.0, 49.79999999999999], [411.0, 59.35], [410.0, 79.35999999999997], [409.0, 82.25], [408.0, 58.48387096774194], [414.0, 47.67049808429126], [415.0, 38.36024844720497], [406.0, 54.81578947368422], [405.0, 52.90277777777778], [404.0, 51.45098039215688], [402.0, 49.55357142857143], [401.0, 50.94444444444445], [400.0, 50.04444444444443], [407.0, 51.199999999999996], [417.0, 44.456140350877206], [416.0, 74.33908045977007], [418.0, 46.005464480874345], [419.0, 44.25414364640882], [420.0, 31.131868131868124], [421.0, 685.3103448275862], [422.0, 56.070175438596486], [423.0, 42.98113207547169], [424.0, 52.77241379310344], [430.0, 67.1052631578947], [431.0, 54.9652173913043], [428.0, 52.17999999999999], [429.0, 58.86419753086419], [425.0, 62.51063829787235], [426.0, 1085.1734104046245], [427.0, 222.12217194570138], [433.0, 60.37307692307691], [432.0, 55.538461538461526], [434.0, 58.31446540880505], [435.0, 70.83333333333334], [436.0, 57.93333333333333], [437.0, 68.37037037037035], [438.0, 67.61250000000001], [439.0, 49.434782608695656], [442.0, 58.75000000000001], [441.0, 63.933333333333344], [440.0, 50.69230769230769], [443.0, 56.815789473684205], [447.0, 441.98734177215186], [446.0, 67.23809523809524], [445.0, 57.22222222222222], [444.0, 67.69444444444446], [462.0, 77.74], [452.0, 69.00000000000001], [453.0, 47.629629629629626], [455.0, 65.21621621621621], [449.0, 58.27272727272727], [448.0, 63.63793103448276], [451.0, 57.9047619047619], [450.0, 58.09090909090908], [454.0, 61.95652173913043], [457.0, 78.43661971830986], [458.0, 80.49999999999997], [459.0, 76.53124999999997], [460.0, 78.85714285714286], [461.0, 73.33749999999996], [463.0, 84.34177215189871], [456.0, 55.42857142857143], [467.0, 73.31372549019612], [464.0, 58.333333333333336], [465.0, 74.9019607843137], [466.0, 90.12244897959182], [468.0, 103.75609756097558], [470.0, 68.0], [469.0, 67.62500000000001], [471.0, 64.44827586206898], [479.0, 71.66666666666669], [473.0, 64.72121212121212], [472.0, 69.85964912280701], [475.0, 60.57142857142856], [474.0, 347.7555555555556], [478.0, 63.1044776119403], [477.0, 68.23076923076921], [476.0, 57.442176870748284], [494.0, 80.9], [495.0, 63.825], [493.0, 69.6], [492.0, 67.45714285714286], [491.0, 75.97560975609755], [490.0, 81.31428571428572], [489.0, 44.0], [488.0, 66.88235294117645], [487.0, 85.02941176470588], [481.0, 95.23076923076923], [480.0, 102.31730769230768], [483.0, 66.6], [482.0, 65.6634615384615], [486.0, 77.30188679245283], [485.0, 65.0], [484.0, 60.04761904761905], [510.0, 102.96350364963503], [511.0, 281.8846153846154], [509.0, 115.34567901234563], [508.0, 128.53333333333333], [507.0, 114.17391304347825], [506.0, 238.0], [505.0, 99.24999999999997], [504.0, 91.7560975609756], [503.0, 74.29411764705883], [497.0, 63.74193548387097], [496.0, 69.4090909090909], [499.0, 64.375], [498.0, 88.99650349650351], [502.0, 66.89285714285714], [501.0, 109.8571428571429], [537.0, 66.83098591549296], [542.0, 122.14634146341461], [543.0, 98.52272727272727], [529.0, 138.27999999999997], [528.0, 114.50000000000004], [531.0, 127.53333333333339], [530.0, 122.55263157894738], [533.0, 82.78297872340426], [532.0, 3208.0], [541.0, 94.20481927710844], [540.0, 95.93333333333332], [538.0, 100.7142857142857], [536.0, 82.94400000000002], [519.0, 132.66666666666663], [518.0, 128.0], [517.0, 149.94797687861268], [516.0, 70.09999999999997], [515.0, 96.21142857142856], [514.0, 155.59047619047618], [513.0, 126.58823529411764], [512.0, 151.5], [527.0, 102.29197080291966], [526.0, 76.85714285714289], [525.0, 55.57894736842105], [524.0, 31.375], [523.0, 52.18367346938776], [522.0, 168.0], [521.0, 284.3719512195122], [520.0, 966.9760479041921], [535.0, 58.0], [534.0, 113.11607142857143], [572.0, 481.87499999999994], [575.0, 27.11224489795918], [561.0, 91.53623188405795], [560.0, 75.14285714285714], [563.0, 86.28], [562.0, 82.84782608695653], [565.0, 92.23809523809524], [564.0, 80.87804878048782], [574.0, 143.4], [573.0, 238.54216867469881], [571.0, 324.55660377358487], [570.0, 276.05882352941177], [569.0, 271.0], [568.0, 160.0591397849461], [559.0, 76.19230769230771], [545.0, 91.68750000000004], [544.0, 100.1392405063291], [547.0, 100.37931034482762], [546.0, 73.3418803418803], [549.0, 69.41044776119406], [548.0, 95.5], [551.0, 93.5], [550.0, 157.159509202454], [558.0, 92.45098039215688], [557.0, 93.00862068965517], [556.0, 116.42307692307692], [555.0, 96.2962962962963], [554.0, 94.96551724137929], [553.0, 116.70588235294119], [552.0, 1399.776595744681], [567.0, 114.68750000000001], [566.0, 91.01333333333335], [604.0, 158.31506849315068], [607.0, 119.67999999999999], [593.0, 396.51587301587307], [592.0, 340.00000000000006], [595.0, 749.9200000000003], [594.0, 96.0], [597.0, 173.13114754098362], [596.0, 122.41242937853106], [606.0, 98.66666666666667], [605.0, 144.7058823529412], [603.0, 205.11111111111111], [602.0, 193.5], [601.0, 154.57142857142856], [600.0, 169.76595744680853], [591.0, 1195.6666666666665], [577.0, 28.212121212121207], [576.0, 27.311475409836067], [579.0, 29.666666666666668], [578.0, 28.933333333333334], [581.0, 31.0], [580.0, 30.053571428571423], [583.0, 32.00000000000001], [582.0, 31.2], [590.0, 188.0], [589.0, 69.2], [588.0, 73.60416666666667], [587.0, 79.91428571428571], [586.0, 81.89999999999999], [585.0, 94.35897435897438], [584.0, 73.32142857142857], [599.0, 172.68333333333328], [598.0, 146.40425531914892], [633.0, 381.7333333333333], [638.0, 97.02469135802475], [639.0, 108.33333333333333], [625.0, 346.69178082191786], [624.0, 109.03571428571429], [627.0, 99.39999999999999], [626.0, 104.0], [629.0, 164.7741935483871], [628.0, 127.57142857142856], [636.0, 400.3333333333334], [635.0, 152.14583333333323], [634.0, 84.6526315789474], [632.0, 253.27710843373478], [615.0, 200.2115384615385], [614.0, 230.95833333333331], [613.0, 200.0761904761905], [612.0, 153.42857142857144], [611.0, 1412.2040816326532], [610.0, 151.22916666666666], [609.0, 157.48888888888885], [608.0, 129.74074074074076], [623.0, 111.64285714285714], [622.0, 398.00781250000017], [621.0, 939.1323529411766], [620.0, 146.70370370370372], [619.0, 168.07272727272726], [618.0, 169.5], [617.0, 202.4], [616.0, 180.27450980392155], [631.0, 105.21153846153844], [630.0, 141.9240506329114], [668.0, 3916.166666666666], [671.0, 2680.379679144384], [657.0, 1465.2428571428572], [656.0, 998.8909090909091], [659.0, 2062.521008403361], [658.0, 1247.6363636363637], [661.0, 2554.24], [660.0, 2396.6250000000005], [670.0, 2527.2758620689665], [669.0, 2181.5333333333324], [667.0, 2411.3766233766232], [666.0, 2258.4285714285716], [665.0, 3387.427631578946], [664.0, 3355.9005847953217], [655.0, 1178.7777777777778], [641.0, 89.46226415094341], [640.0, 98.49253731343283], [643.0, 115.625], [642.0, 272.52873563218395], [645.0, 106.19215686274514], [644.0, 82.41379310344826], [647.0, 559.25], [646.0, 134.2066115702479], [654.0, 1646.394160583942], [653.0, 219.70000000000002], [652.0, 440.0454545454545], [651.0, 91.85714285714286], [650.0, 189.76521739130442], [649.0, 295.79473684210524], [663.0, 2114.3469387755113], [662.0, 2897.702127659574], [700.0, 1296.4102564102566], [703.0, 3201.734042553191], [689.0, 3853.9906542056065], [688.0, 4317.490740740741], [691.0, 2466.0544554455455], [690.0, 5583.855670103096], [693.0, 2162.5899999999997], [692.0, 2954.238095238095], [702.0, 2627.6388888888887], [701.0, 1783.94], [699.0, 2825.3999999999996], [698.0, 2281.7179487179496], [697.0, 4736.281588447653], [696.0, 1206.0], [687.0, 5854.684210526316], [673.0, 3545.9692307692294], [672.0, 683.6666666666667], [675.0, 5175.016393442623], [674.0, 4894.411764705881], [677.0, 7878.027522935779], [676.0, 8961.096774193547], [679.0, 2798.5625], [678.0, 3046.197368421053], [686.0, 2739.1563275434246], [685.0, 1709.7499999999993], [684.0, 2159.8461538461556], [683.0, 1712.8064516129039], [682.0, 1870.8666666666666], [681.0, 3700.68], [680.0, 2756.9999999999995], [695.0, 1391.7586206896553], [694.0, 1301.7777777777776], [732.0, 129.37735849056594], [716.0, 265.0444444444444], [715.0, 184.22222222222223], [714.0, 522.026086956522], [713.0, 1064.4705882352948], [712.0, 2093.9756097560976], [717.0, 117.31531531531535], [719.0, 109.2296296296296], [705.0, 1996.103448275862], [704.0, 2402.5178571428582], [707.0, 5678.901734104048], [706.0, 4703.931868131868], [709.0, 3386.166666666667], [708.0, 4225.529411764706], [711.0, 2792.0740740740744], [710.0, 2623.8], [718.0, 58.476190476190474], [735.0, 74.72549019607843], [721.0, 59.580246913580254], [720.0, 276.4822695035461], [723.0, 147.11612903225804], [722.0, 60.55263157894738], [725.0, 88.8529411764706], [724.0, 289.48571428571427], [727.0, 126.45454545454548], [726.0, 128.5], [734.0, 63.823529411764724], [733.0, 56.470588235294116], [731.0, 114.46153846153848], [730.0, 76.17346938775509], [729.0, 294.70270270270277], [728.0, 53.57142857142858], [761.0, 88.75925925925927], [765.0, 101.32142857142851], [766.0, 51.0], [753.0, 81.73529411764707], [752.0, 63.86666666666667], [755.0, 1031.8636363636363], [754.0, 66.23076923076924], [757.0, 108.44036697247707], [756.0, 185.97641509433973], [764.0, 66.51824817518248], [763.0, 84.83076923076923], [762.0, 67.83333333333334], [760.0, 98.00438596491225], [743.0, 84.97959183673464], [742.0, 78.18487394957985], [741.0, 61.65306122448979], [740.0, 70.02108433734944], [739.0, 82.07964601769915], [738.0, 98.79914529914525], [737.0, 121.63461538461537], [736.0, 335.8263473053892], [751.0, 101.63157894736842], [750.0, 114.74999999999997], [749.0, 81.0], [748.0, 395.7922077922078], [747.0, 96.33333333333333], [746.0, 185.3933333333334], [745.0, 87.03124999999999], [744.0, 163.5692307692308], [759.0, 80.91666666666664], [758.0, 80.15625000000001], [796.0, 2014.1428571428562], [799.0, 1272.0496183206105], [785.0, 4553.789473684211], [784.0, 9712.330827067673], [787.0, 927.4972972972971], [786.0, 2412.0992366412206], [789.0, 1186.681818181818], [788.0, 962.1698113207551], [798.0, 1701.7391304347827], [797.0, 1564.709219858156], [795.0, 1211.7500000000002], [794.0, 1529.7581699346406], [793.0, 2093.1169811320756], [792.0, 1979.1306818181813], [783.0, 6965.994791666667], [769.0, 398.1147540983606], [768.0, 59.333333333333336], [771.0, 105.27049180327872], [770.0, 94.46122448979594], [773.0, 116.0], [772.0, 136.48678071539675], [775.0, 4430.142857142858], [774.0, 112.62100456621006], [782.0, 1298.5666666666664], [781.0, 344.4329896907217], [780.0, 2261.137931034483], [779.0, 1850.4549180327872], [778.0, 1169.053191489362], [777.0, 596.875], [776.0, 406.6195652173913], [791.0, 1307.4060150375935], [790.0, 1017.1860465116282], [828.0, 1660.6666666666667], [806.0, 2017.886194029851], [805.0, 1775.4108108108105], [804.0, 4161.900000000001], [803.0, 1469.9347826086957], [802.0, 1621.8848167539265], [801.0, 1943.5443037974687], [800.0, 2479.5733333333337], [807.0, 3732.3579277864956], [815.0, 8788.955], [814.0, 8622.548387096775], [813.0, 5878.200000000001], [812.0, 5455.426470588235], [811.0, 4917.091703056765], [810.0, 4080.5000000000064], [809.0, 3366.8489208633086], [808.0, 3824.6507042253506], [831.0, 6631.405405405404], [817.0, 7875.875346260383], [816.0, 7636.265822784809], [819.0, 7923.80821917808], [818.0, 10053.694117647061], [821.0, 3439.7128463476092], [820.0, 5656.33908045977], [823.0, 3725.8942731277566], [822.0, 1688.3214285714287], [830.0, 6371.190476190477], [829.0, 7634.905660377354], [827.0, 4106.605392156856], [826.0, 2205.5], [825.0, 2222.6666666666665], [824.0, 3185.7681159420285], [860.0, 6916.287037037035], [863.0, 1775.2916666666663], [849.0, 2912.1054852320653], [848.0, 3906.0107526881734], [851.0, 2407.82], [850.0, 5940.43165467626], [853.0, 4476.208333333333], [852.0, 2600.1764705882347], [862.0, 2180.6], [861.0, 3789.9113300492622], [859.0, 13142.89237668162], [858.0, 11369.24260355029], [857.0, 4209.153846153846], [856.0, 6221.958823529409], [847.0, 3021.774193548385], [833.0, 6992.4119782214175], [832.0, 7793.8340248962595], [835.0, 14841.49152542373], [834.0, 16082.306666666667], [837.0, 6274.336653386454], [836.0, 14764.199999999999], [839.0, 1656.4736842105267], [838.0, 2384.944827586206], [846.0, 2367.490909090909], [845.0, 1831.6176470588243], [844.0, 1296.1785714285713], [843.0, 2288.296], [842.0, 1801.8811881188126], [841.0, 2162.6701030927843], [840.0, 1786.7142857142853], [855.0, 5236.070175438595], [854.0, 6738.59183673469], [892.0, 325.7948113207546], [895.0, 159.61111111111117], [881.0, 265.93939393939394], [880.0, 49.59310344827586], [883.0, 78.16707616707617], [882.0, 151.00000000000006], [885.0, 91.13761467889906], [884.0, 15.147368421052628], [894.0, 135.32236842105257], [893.0, 20.97101449275362], [891.0, 668.3133333333334], [890.0, 125.791878172589], [889.0, 104.75280898876404], [888.0, 90.91666666666663], [879.0, 48.715789473684225], [865.0, 579.7323943661972], [864.0, 927.0156250000001], [867.0, 182.54744525547449], [866.0, 67.8888888888889], [869.0, 114.28771929824563], [868.0, 68.80434782608694], [871.0, 57.50000000000001], [870.0, 148.80672268907563], [878.0, 134.3068592057762], [877.0, 65.58163265306123], [876.0, 59.35714285714287], [875.0, 127.03703703703702], [874.0, 64.76515151515152], [873.0, 176.5305755395682], [872.0, 61.43062200956936], [887.0, 107.54545454545453], [886.0, 317.17907444668043], [924.0, 184.5128205128205], [927.0, 25.186046511627904], [913.0, 74.40170940170941], [912.0, 60.28925619834712], [915.0, 127.0748663101604], [914.0, 21.027027027027025], [917.0, 26.5625], [916.0, 1209.3703703703704], [926.0, 274.67796610169484], [925.0, 231.60465116279065], [923.0, 30.87755102040816], [922.0, 38.0], [921.0, 458.8933333333333], [920.0, 127.31950207468873], [911.0, 69.55319148936171], [897.0, 256.88461538461536], [896.0, 20.134146341463406], [899.0, 157.32142857142856], [898.0, 181.67543859649123], [901.0, 13.821428571428568], [900.0, 29.999999999999993], [903.0, 20.122302158273392], [902.0, 203.18181818181813], [910.0, 71.38016528925623], [909.0, 12.25], [908.0, 314.2543859649123], [907.0, 266.52173913043475], [906.0, 31.76352705410823], [905.0, 53.083720930232566], [904.0, 77.04237288135596], [919.0, 86.03529411764704], [918.0, 37.60655737704921], [954.0, 89.39999999999996], [958.0, 1077.4074074074072], [959.0, 231.2672811059907], [945.0, 209.5151515151515], [944.0, 442.56834532374097], [947.0, 219.49999999999991], [946.0, 96.42465753424655], [949.0, 474.2758620689655], [948.0, 76.5], [957.0, 6.0], [956.0, 99.70720720720719], [955.0, 24.041666666666664], [953.0, 37.4375], [952.0, 59.5], [935.0, 26.666666666666664], [934.0, 194.25000000000006], [933.0, 54.11382113821135], [932.0, 9.166666666666668], [943.0, 173.14705882352942], [929.0, 17.879999999999995], [928.0, 124.42857142857144], [931.0, 8.2], [930.0, 298.24137931034477], [942.0, 592.3703703703704], [941.0, 22.71052631578948], [940.0, 169.04225352112675], [939.0, 59.41525423728813], [938.0, 27.555555555555557], [937.0, 20.764705882352942], [936.0, 207.68749999999994], [951.0, 429.6666666666667], [950.0, 109.91250000000004], [988.0, 27.513157894736835], [974.0, 837.7380191693292], [973.0, 211.0], [972.0, 197.10606060606054], [971.0, 102.06197183098593], [970.0, 148.60655737704917], [969.0, 131.16129032258067], [968.0, 130.04878048780498], [975.0, 78.09644670050754], [987.0, 204.78832116788317], [991.0, 9050.369774919607], [977.0, 37.92982456140351], [976.0, 102.20091324200911], [979.0, 36.34343434343433], [978.0, 60.545918367346964], [981.0, 41.982142857142826], [980.0, 36.477756286266946], [983.0, 25.40277777777777], [982.0, 925.1616541353383], [990.0, 8008.318713450291], [989.0, 3590.6931886678735], [986.0, 10.11111111111111], [985.0, 39.07894736842104], [984.0, 52.51851851851853], [967.0, 1435.3571428571424], [966.0, 1195.7905759162302], [965.0, 36.31818181818182], [964.0, 103.06930693069312], [963.0, 66.96396396396395], [962.0, 72.24000000000002], [961.0, 35.791262135922345], [960.0, 110.43283582089552], [993.0, 1430.2499999999998], [992.0, 4815.198863636362], [1.0, 644.9347826086955]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[596.2735500000006, 1126.8935299999964]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 993.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21352.1, "minX": 1.6457526E12, "maxY": 198805.58333333334, "series": [{"data": [[1.64575272E12, 189289.55], [1.6457526E12, 198805.58333333334], [1.64575266E12, 45015.46666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64575272E12, 86293.4], [1.6457526E12, 88924.8], [1.64575266E12, 21352.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64575272E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 650.9837518790324, "minX": 1.6457526E12, "maxY": 4607.989068528379, "series": [{"data": [[1.64575272E12, 753.8831077077357], [1.6457526E12, 650.9837518790324], [1.64575266E12, 4607.989068528379]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64575272E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 644.1222477672645, "minX": 1.6457526E12, "maxY": 4528.882325923196, "series": [{"data": [[1.64575272E12, 753.7539997265028], [1.6457526E12, 644.1222477672645], [1.64575266E12, 4528.882325923196]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64575272E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 86.94502166416157, "minX": 1.6457526E12, "maxY": 750.2390225978334, "series": [{"data": [[1.64575272E12, 95.74966953826458], [1.6457526E12, 86.94502166416157], [1.64575266E12, 750.2390225978334]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64575272E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6457526E12, "maxY": 60826.0, "series": [{"data": [[1.64575272E12, 37329.0], [1.6457526E12, 36552.0], [1.64575266E12, 60826.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64575272E12, 90.0], [1.6457526E12, 2669.0], [1.64575266E12, 7851.400000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64575272E12, 269.0], [1.6457526E12, 8942.990000000002], [1.64575266E12, 20061.479999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64575272E12, 114.0], [1.6457526E12, 5668.750000000004], [1.64575266E12, 10426.499999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64575272E12, 0.0], [1.6457526E12, 1.0], [1.64575266E12, 594.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64575272E12, 46.0], [1.6457526E12, 39.0], [1.64575266E12, 1738.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64575272E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 68092.0, "series": [{"data": [[10.0, 2925.5], [15.0, 4610.0], [31.0, 4997.5], [45.0, 6412.0], [49.0, 6528.0], [48.0, 4565.0], [53.0, 5095.5], [57.0, 1.0], [59.0, 4875.0], [66.0, 5373.0], [64.0, 2212.0], [68.0, 6086.0], [70.0, 7169.0], [71.0, 5947.0], [72.0, 3834.0], [75.0, 3051.0], [76.0, 4234.5], [78.0, 4607.0], [79.0, 3028.0], [83.0, 7100.5], [80.0, 3676.5], [82.0, 2941.5], [84.0, 7784.0], [86.0, 3728.0], [85.0, 1862.0], [89.0, 4886.5], [92.0, 4377.0], [95.0, 2604.5], [101.0, 2369.5], [100.0, 2063.5], [102.0, 2891.0], [105.0, 5257.5], [109.0, 2016.0], [111.0, 5065.0], [112.0, 2270.0], [113.0, 8775.5], [116.0, 1729.5], [117.0, 7216.0], [123.0, 4178.0], [127.0, 2174.0], [124.0, 5100.0], [133.0, 3003.0], [132.0, 5766.5], [135.0, 5879.0], [129.0, 2911.0], [143.0, 4798.5], [139.0, 5540.0], [142.0, 2433.0], [147.0, 1095.0], [149.0, 5033.5], [157.0, 1476.0], [166.0, 2427.0], [175.0, 4520.5], [171.0, 1.0], [176.0, 3201.0], [177.0, 1.0], [186.0, 1809.0], [189.0, 4993.0], [185.0, 7030.5], [190.0, 4085.0], [191.0, 823.0], [194.0, 6334.5], [202.0, 5086.5], [205.0, 5581.0], [201.0, 10940.0], [200.0, 1037.0], [214.0, 1490.0], [219.0, 998.0], [218.0, 1988.5], [223.0, 1399.5], [226.0, 1663.0], [233.0, 8023.0], [238.0, 1573.5], [240.0, 8966.0], [247.0, 1134.0], [248.0, 96.5], [252.0, 989.0], [262.0, 1894.0], [267.0, 1705.0], [287.0, 5998.0], [285.0, 1003.0], [277.0, 11148.5], [276.0, 1778.0], [294.0, 1113.0], [301.0, 1456.0], [290.0, 3540.0], [291.0, 29446.0], [304.0, 1269.0], [305.0, 1602.0], [310.0, 1265.0], [334.0, 1339.5], [332.0, 1476.0], [346.0, 1097.0], [343.0, 1429.0], [352.0, 1201.0], [359.0, 1053.0], [378.0, 8032.5], [396.0, 7535.0], [392.0, 1069.0], [421.0, 1153.0], [507.0, 1547.5], [628.0, 4048.0], [1688.0, 63.0], [1966.0, 96.0], [2430.0, 14.0], [2861.0, 80.0], [3334.0, 9.0], [3381.0, 30.0], [3542.0, 10.0], [3730.0, 99.0], [3863.0, 16.0], [4139.0, 20.0], [4099.0, 17.0], [4527.0, 34.0], [4393.0, 24.0], [4447.0, 81.0], [4910.0, 37.0], [5162.0, 59.0], [5917.0, 52.0], [6384.0, 62.0], [6910.0, 42.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[628.0, 12656.0], [1966.0, 1575.0], [2861.0, 13934.0], [3730.0, 85.5], [4139.0, 20855.0], [4099.0, 23456.0], [4393.0, 19748.0], [4447.0, 145.0], [5917.0, 464.0], [6384.0, 68.0], [45.0, 30453.0], [48.0, 5248.0], [53.0, 17439.0], [57.0, 29283.0], [59.0, 6038.0], [66.0, 30034.0], [64.0, 32582.0], [70.0, 16390.0], [71.0, 4200.5], [72.0, 33444.0], [76.0, 18349.5], [83.0, 9735.5], [80.0, 50908.0], [84.0, 8736.0], [86.0, 65285.0], [89.0, 28388.0], [92.0, 11059.0], [95.0, 4078.5], [101.0, 1946.0], [100.0, 32946.5], [105.0, 6538.0], [109.0, 27135.0], [112.0, 3002.0], [113.0, 5405.0], [116.0, 30641.5], [117.0, 4133.0], [124.0, 13486.0], [132.0, 4322.5], [135.0, 3541.5], [133.0, 4560.0], [143.0, 18242.0], [139.0, 3536.0], [142.0, 1641.0], [149.0, 2720.0], [147.0, 5004.0], [157.0, 16172.5], [166.0, 2695.5], [175.0, 14770.0], [171.0, 29629.0], [176.0, 9506.0], [177.0, 24929.0], [186.0, 11497.0], [189.0, 3656.0], [185.0, 5204.0], [190.0, 11934.5], [191.0, 705.0], [194.0, 3746.5], [202.0, 19166.0], [205.0, 15584.0], [201.0, 5137.0], [200.0, 13982.0], [214.0, 11423.0], [219.0, 2211.0], [218.0, 29669.5], [223.0, 31758.0], [226.0, 3447.0], [233.0, 3261.0], [239.0, 1906.0], [240.0, 4079.0], [247.0, 35262.0], [252.0, 68092.0], [262.0, 2632.0], [267.0, 10540.0], [1.0, 26992.0], [287.0, 18031.5], [285.0, 14593.0], [277.0, 3891.0], [276.0, 3314.0], [294.0, 42631.0], [290.0, 8730.0], [291.0, 1089.0], [304.0, 21305.0], [332.0, 10797.5], [359.0, 31437.5], [378.0, 3485.0], [396.0, 4060.0], [392.0, 46431.0], [421.0, 22681.0], [507.0, 1293.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6910.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 65285.0, "series": [{"data": [[10.0, 2925.5], [15.0, 4610.0], [31.0, 4997.5], [45.0, 6411.5], [49.0, 6528.0], [48.0, 4565.0], [53.0, 5095.5], [57.0, 1.0], [59.0, 4875.0], [66.0, 5372.0], [64.0, 2212.0], [68.0, 6086.0], [70.0, 7169.0], [71.0, 5947.0], [72.0, 3834.0], [75.0, 3051.0], [76.0, 4234.5], [78.0, 4607.0], [79.0, 3028.0], [83.0, 7100.5], [80.0, 3676.5], [82.0, 2941.5], [84.0, 7784.0], [86.0, 3728.0], [85.0, 1862.0], [89.0, 4886.5], [92.0, 4377.0], [95.0, 2604.5], [101.0, 2369.5], [100.0, 2063.5], [102.0, 2891.0], [105.0, 5257.5], [109.0, 2016.0], [111.0, 5065.0], [112.0, 2270.0], [113.0, 8775.5], [116.0, 1729.5], [117.0, 7216.0], [123.0, 4178.0], [127.0, 2174.0], [124.0, 5100.0], [133.0, 3003.0], [132.0, 5766.5], [135.0, 5879.0], [129.0, 2911.0], [143.0, 4798.5], [139.0, 5540.0], [142.0, 2433.0], [147.0, 1095.0], [149.0, 5033.5], [157.0, 1476.0], [166.0, 2427.0], [175.0, 4520.5], [171.0, 1.0], [176.0, 3201.0], [177.0, 1.0], [186.0, 1809.0], [189.0, 4993.0], [185.0, 7030.5], [190.0, 4085.0], [191.0, 823.0], [194.0, 6334.5], [202.0, 5086.5], [205.0, 5581.0], [201.0, 10940.0], [200.0, 1037.0], [214.0, 1490.0], [219.0, 998.0], [218.0, 1988.5], [223.0, 1399.5], [226.0, 1663.0], [233.0, 8023.0], [238.0, 1573.5], [240.0, 8966.0], [247.0, 1134.0], [248.0, 96.5], [252.0, 989.0], [262.0, 1894.0], [267.0, 1705.0], [287.0, 5998.0], [285.0, 1003.0], [277.0, 11148.5], [276.0, 1778.0], [294.0, 1113.0], [301.0, 1456.0], [290.0, 3540.0], [291.0, 29446.0], [304.0, 1269.0], [305.0, 1602.0], [310.0, 1265.0], [334.0, 1339.5], [332.0, 1476.0], [346.0, 1097.0], [343.0, 1429.0], [352.0, 1201.0], [359.0, 1053.0], [378.0, 8032.5], [396.0, 7535.0], [392.0, 1069.0], [421.0, 1153.0], [507.0, 1547.5], [628.0, 4048.0], [1688.0, 63.0], [1966.0, 96.0], [2430.0, 13.0], [2861.0, 80.0], [3334.0, 8.0], [3381.0, 30.0], [3542.0, 10.0], [3730.0, 99.0], [3863.0, 16.0], [4139.0, 20.0], [4099.0, 17.0], [4527.0, 33.0], [4393.0, 23.0], [4447.0, 81.0], [4910.0, 37.0], [5162.0, 59.0], [5917.0, 51.5], [6384.0, 62.0], [6910.0, 42.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[628.0, 12656.0], [1966.0, 1575.0], [2861.0, 13934.0], [3730.0, 85.5], [4139.0, 20855.0], [4099.0, 23456.0], [4393.0, 0.0], [4447.0, 145.0], [5917.0, 464.0], [6384.0, 68.0], [45.0, 30453.0], [48.0, 5248.0], [53.0, 17439.0], [57.0, 29282.0], [59.0, 6038.0], [66.0, 30034.0], [64.0, 32582.0], [70.0, 16390.0], [71.0, 4200.5], [72.0, 33444.0], [76.0, 18349.5], [83.0, 0.0], [80.0, 50908.0], [84.0, 0.0], [86.0, 65285.0], [89.0, 28387.0], [92.0, 11040.5], [95.0, 4077.0], [101.0, 1945.0], [100.0, 32946.5], [105.0, 6538.0], [109.0, 27135.0], [112.0, 3002.0], [113.0, 5405.0], [116.0, 0.0], [117.0, 4133.0], [124.0, 13486.0], [132.0, 4322.5], [135.0, 3447.0], [133.0, 4556.0], [143.0, 18242.0], [139.0, 3535.0], [142.0, 1638.0], [149.0, 2720.0], [147.0, 5004.0], [157.0, 16172.5], [166.0, 2695.5], [175.0, 14770.0], [171.0, 29629.0], [176.0, 9506.0], [177.0, 24929.0], [186.0, 11497.0], [189.0, 3656.0], [185.0, 5204.0], [190.0, 11934.5], [191.0, 703.0], [194.0, 3746.5], [202.0, 19166.0], [205.0, 15581.0], [201.0, 5137.0], [200.0, 13982.0], [214.0, 11282.0], [219.0, 2198.0], [218.0, 17248.5], [223.0, 31758.0], [226.0, 3446.5], [233.0, 3260.0], [239.0, 1906.0], [240.0, 4079.0], [247.0, 35262.0], [252.0, 0.0], [262.0, 2632.0], [267.0, 10540.0], [1.0, 26992.0], [287.0, 18025.5], [285.0, 14593.0], [277.0, 3891.0], [276.0, 3314.0], [294.0, 42631.0], [290.0, 8730.0], [291.0, 1089.0], [304.0, 0.0], [332.0, 10797.0], [359.0, 31437.5], [378.0, 3485.0], [396.0, 4059.0], [392.0, 46430.5], [421.0, 22681.0], [507.0, 1290.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6910.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 180.5, "minX": 1.6457526E12, "maxY": 768.1833333333333, "series": [{"data": [[1.64575272E12, 717.9833333333333], [1.6457526E12, 768.1833333333333], [1.64575266E12, 180.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64575272E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6457526E12, "maxY": 729.55, "series": [{"data": [[1.64575272E12, 667.85], [1.6457526E12, 729.55], [1.64575266E12, 125.21666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64575272E12, 63.45], [1.6457526E12, 24.05], [1.64575266E12, 55.733333333333334]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.6457526E12, 0.03333333333333333], [1.64575266E12, 0.43333333333333335]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.6457526E12, 0.3], [1.64575266E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64575272E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 24.383333333333333, "minX": 1.6457526E12, "maxY": 729.55, "series": [{"data": [[1.64575272E12, 667.85], [1.6457526E12, 729.55], [1.64575266E12, 125.21666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.64575272E12, 63.45], [1.6457526E12, 24.383333333333333], [1.64575266E12, 56.21666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64575272E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 24.383333333333333, "minX": 1.6457526E12, "maxY": 729.55, "series": [{"data": [[1.64575272E12, 667.85], [1.6457526E12, 729.55], [1.64575266E12, 125.21666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.64575272E12, 63.45], [1.6457526E12, 24.383333333333333], [1.64575266E12, 56.21666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64575272E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

