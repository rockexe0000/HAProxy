/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 64893.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 4.0], [5.6, 4.0], [5.7, 4.0], [5.8, 4.0], [5.9, 4.0], [6.0, 4.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 5.0], [7.5, 5.0], [7.6, 5.0], [7.7, 5.0], [7.8, 5.0], [7.9, 5.0], [8.0, 5.0], [8.1, 5.0], [8.2, 5.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 9.0], [12.6, 9.0], [12.7, 9.0], [12.8, 9.0], [12.9, 9.0], [13.0, 9.0], [13.1, 9.0], [13.2, 9.0], [13.3, 9.0], [13.4, 9.0], [13.5, 9.0], [13.6, 10.0], [13.7, 10.0], [13.8, 10.0], [13.9, 10.0], [14.0, 10.0], [14.1, 10.0], [14.2, 10.0], [14.3, 10.0], [14.4, 10.0], [14.5, 10.0], [14.6, 10.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 11.0], [15.1, 11.0], [15.2, 11.0], [15.3, 11.0], [15.4, 11.0], [15.5, 11.0], [15.6, 11.0], [15.7, 11.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 13.0], [16.8, 13.0], [16.9, 13.0], [17.0, 13.0], [17.1, 13.0], [17.2, 13.0], [17.3, 13.0], [17.4, 13.0], [17.5, 13.0], [17.6, 13.0], [17.7, 14.0], [17.8, 14.0], [17.9, 14.0], [18.0, 14.0], [18.1, 14.0], [18.2, 14.0], [18.3, 14.0], [18.4, 14.0], [18.5, 14.0], [18.6, 15.0], [18.7, 15.0], [18.8, 15.0], [18.9, 15.0], [19.0, 15.0], [19.1, 15.0], [19.2, 15.0], [19.3, 15.0], [19.4, 15.0], [19.5, 16.0], [19.6, 16.0], [19.7, 16.0], [19.8, 16.0], [19.9, 16.0], [20.0, 16.0], [20.1, 16.0], [20.2, 16.0], [20.3, 17.0], [20.4, 17.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 17.0], [20.9, 17.0], [21.0, 17.0], [21.1, 17.0], [21.2, 18.0], [21.3, 18.0], [21.4, 18.0], [21.5, 18.0], [21.6, 18.0], [21.7, 18.0], [21.8, 18.0], [21.9, 18.0], [22.0, 18.0], [22.1, 19.0], [22.2, 19.0], [22.3, 19.0], [22.4, 19.0], [22.5, 19.0], [22.6, 19.0], [22.7, 19.0], [22.8, 19.0], [22.9, 20.0], [23.0, 20.0], [23.1, 20.0], [23.2, 20.0], [23.3, 20.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 21.0], [23.9, 21.0], [24.0, 21.0], [24.1, 21.0], [24.2, 21.0], [24.3, 21.0], [24.4, 21.0], [24.5, 21.0], [24.6, 21.0], [24.7, 22.0], [24.8, 22.0], [24.9, 22.0], [25.0, 22.0], [25.1, 22.0], [25.2, 22.0], [25.3, 22.0], [25.4, 22.0], [25.5, 22.0], [25.6, 23.0], [25.7, 23.0], [25.8, 23.0], [25.9, 23.0], [26.0, 23.0], [26.1, 23.0], [26.2, 23.0], [26.3, 23.0], [26.4, 23.0], [26.5, 24.0], [26.6, 24.0], [26.7, 24.0], [26.8, 24.0], [26.9, 24.0], [27.0, 24.0], [27.1, 24.0], [27.2, 24.0], [27.3, 25.0], [27.4, 25.0], [27.5, 25.0], [27.6, 25.0], [27.7, 25.0], [27.8, 25.0], [27.9, 25.0], [28.0, 25.0], [28.1, 25.0], [28.2, 26.0], [28.3, 26.0], [28.4, 26.0], [28.5, 26.0], [28.6, 26.0], [28.7, 26.0], [28.8, 26.0], [28.9, 26.0], [29.0, 26.0], [29.1, 27.0], [29.2, 27.0], [29.3, 27.0], [29.4, 27.0], [29.5, 27.0], [29.6, 27.0], [29.7, 27.0], [29.8, 27.0], [29.9, 28.0], [30.0, 28.0], [30.1, 28.0], [30.2, 28.0], [30.3, 28.0], [30.4, 28.0], [30.5, 28.0], [30.6, 28.0], [30.7, 29.0], [30.8, 29.0], [30.9, 29.0], [31.0, 29.0], [31.1, 29.0], [31.2, 29.0], [31.3, 29.0], [31.4, 29.0], [31.5, 29.0], [31.6, 30.0], [31.7, 30.0], [31.8, 30.0], [31.9, 30.0], [32.0, 30.0], [32.1, 30.0], [32.2, 30.0], [32.3, 30.0], [32.4, 31.0], [32.5, 31.0], [32.6, 31.0], [32.7, 31.0], [32.8, 31.0], [32.9, 31.0], [33.0, 31.0], [33.1, 31.0], [33.2, 32.0], [33.3, 32.0], [33.4, 32.0], [33.5, 32.0], [33.6, 32.0], [33.7, 32.0], [33.8, 32.0], [33.9, 32.0], [34.0, 32.0], [34.1, 33.0], [34.2, 33.0], [34.3, 33.0], [34.4, 33.0], [34.5, 33.0], [34.6, 33.0], [34.7, 33.0], [34.8, 33.0], [34.9, 34.0], [35.0, 34.0], [35.1, 34.0], [35.2, 34.0], [35.3, 34.0], [35.4, 34.0], [35.5, 34.0], [35.6, 34.0], [35.7, 35.0], [35.8, 35.0], [35.9, 35.0], [36.0, 35.0], [36.1, 35.0], [36.2, 35.0], [36.3, 35.0], [36.4, 35.0], [36.5, 36.0], [36.6, 36.0], [36.7, 36.0], [36.8, 36.0], [36.9, 36.0], [37.0, 36.0], [37.1, 36.0], [37.2, 36.0], [37.3, 37.0], [37.4, 37.0], [37.5, 37.0], [37.6, 37.0], [37.7, 37.0], [37.8, 37.0], [37.9, 37.0], [38.0, 37.0], [38.1, 38.0], [38.2, 38.0], [38.3, 38.0], [38.4, 38.0], [38.5, 38.0], [38.6, 38.0], [38.7, 38.0], [38.8, 39.0], [38.9, 39.0], [39.0, 39.0], [39.1, 39.0], [39.2, 39.0], [39.3, 39.0], [39.4, 39.0], [39.5, 40.0], [39.6, 40.0], [39.7, 40.0], [39.8, 40.0], [39.9, 40.0], [40.0, 40.0], [40.1, 40.0], [40.2, 41.0], [40.3, 41.0], [40.4, 41.0], [40.5, 41.0], [40.6, 41.0], [40.7, 41.0], [40.8, 41.0], [40.9, 42.0], [41.0, 42.0], [41.1, 42.0], [41.2, 42.0], [41.3, 42.0], [41.4, 42.0], [41.5, 42.0], [41.6, 43.0], [41.7, 43.0], [41.8, 43.0], [41.9, 43.0], [42.0, 43.0], [42.1, 43.0], [42.2, 43.0], [42.3, 44.0], [42.4, 44.0], [42.5, 44.0], [42.6, 44.0], [42.7, 44.0], [42.8, 44.0], [42.9, 45.0], [43.0, 45.0], [43.1, 45.0], [43.2, 45.0], [43.3, 45.0], [43.4, 45.0], [43.5, 45.0], [43.6, 46.0], [43.7, 46.0], [43.8, 46.0], [43.9, 46.0], [44.0, 46.0], [44.1, 46.0], [44.2, 47.0], [44.3, 47.0], [44.4, 47.0], [44.5, 47.0], [44.6, 47.0], [44.7, 47.0], [44.8, 47.0], [44.9, 48.0], [45.0, 48.0], [45.1, 48.0], [45.2, 48.0], [45.3, 48.0], [45.4, 48.0], [45.5, 49.0], [45.6, 49.0], [45.7, 49.0], [45.8, 49.0], [45.9, 49.0], [46.0, 49.0], [46.1, 50.0], [46.2, 50.0], [46.3, 50.0], [46.4, 50.0], [46.5, 50.0], [46.6, 50.0], [46.7, 50.0], [46.8, 51.0], [46.9, 51.0], [47.0, 51.0], [47.1, 51.0], [47.2, 51.0], [47.3, 51.0], [47.4, 51.0], [47.5, 52.0], [47.6, 52.0], [47.7, 52.0], [47.8, 52.0], [47.9, 52.0], [48.0, 52.0], [48.1, 52.0], [48.2, 53.0], [48.3, 53.0], [48.4, 53.0], [48.5, 53.0], [48.6, 53.0], [48.7, 53.0], [48.8, 53.0], [48.9, 54.0], [49.0, 54.0], [49.1, 54.0], [49.2, 54.0], [49.3, 54.0], [49.4, 54.0], [49.5, 55.0], [49.6, 55.0], [49.7, 55.0], [49.8, 55.0], [49.9, 55.0], [50.0, 55.0], [50.1, 56.0], [50.2, 56.0], [50.3, 56.0], [50.4, 56.0], [50.5, 56.0], [50.6, 56.0], [50.7, 57.0], [50.8, 57.0], [50.9, 57.0], [51.0, 57.0], [51.1, 57.0], [51.2, 57.0], [51.3, 58.0], [51.4, 58.0], [51.5, 58.0], [51.6, 58.0], [51.7, 58.0], [51.8, 59.0], [51.9, 59.0], [52.0, 59.0], [52.1, 59.0], [52.2, 59.0], [52.3, 59.0], [52.4, 60.0], [52.5, 60.0], [52.6, 60.0], [52.7, 60.0], [52.8, 60.0], [52.9, 61.0], [53.0, 61.0], [53.1, 61.0], [53.2, 61.0], [53.3, 61.0], [53.4, 61.0], [53.5, 62.0], [53.6, 62.0], [53.7, 62.0], [53.8, 62.0], [53.9, 62.0], [54.0, 62.0], [54.1, 63.0], [54.2, 63.0], [54.3, 63.0], [54.4, 63.0], [54.5, 63.0], [54.6, 64.0], [54.7, 64.0], [54.8, 64.0], [54.9, 64.0], [55.0, 64.0], [55.1, 64.0], [55.2, 65.0], [55.3, 65.0], [55.4, 65.0], [55.5, 65.0], [55.6, 65.0], [55.7, 66.0], [55.8, 66.0], [55.9, 66.0], [56.0, 66.0], [56.1, 66.0], [56.2, 67.0], [56.3, 67.0], [56.4, 67.0], [56.5, 67.0], [56.6, 67.0], [56.7, 68.0], [56.8, 68.0], [56.9, 68.0], [57.0, 68.0], [57.1, 68.0], [57.2, 69.0], [57.3, 69.0], [57.4, 69.0], [57.5, 69.0], [57.6, 70.0], [57.7, 70.0], [57.8, 70.0], [57.9, 70.0], [58.0, 71.0], [58.1, 71.0], [58.2, 71.0], [58.3, 71.0], [58.4, 72.0], [58.5, 72.0], [58.6, 72.0], [58.7, 72.0], [58.8, 73.0], [58.9, 73.0], [59.0, 73.0], [59.1, 73.0], [59.2, 74.0], [59.3, 74.0], [59.4, 74.0], [59.5, 74.0], [59.6, 75.0], [59.7, 75.0], [59.8, 75.0], [59.9, 75.0], [60.0, 76.0], [60.1, 76.0], [60.2, 76.0], [60.3, 77.0], [60.4, 77.0], [60.5, 77.0], [60.6, 77.0], [60.7, 78.0], [60.8, 78.0], [60.9, 78.0], [61.0, 79.0], [61.1, 79.0], [61.2, 79.0], [61.3, 79.0], [61.4, 80.0], [61.5, 80.0], [61.6, 80.0], [61.7, 81.0], [61.8, 81.0], [61.9, 81.0], [62.0, 82.0], [62.1, 82.0], [62.2, 82.0], [62.3, 83.0], [62.4, 83.0], [62.5, 83.0], [62.6, 84.0], [62.7, 84.0], [62.8, 85.0], [62.9, 85.0], [63.0, 86.0], [63.1, 86.0], [63.2, 87.0], [63.3, 87.0], [63.4, 87.0], [63.5, 88.0], [63.6, 88.0], [63.7, 89.0], [63.8, 89.0], [63.9, 90.0], [64.0, 90.0], [64.1, 91.0], [64.2, 91.0], [64.3, 92.0], [64.4, 92.0], [64.5, 92.0], [64.6, 93.0], [64.7, 93.0], [64.8, 94.0], [64.9, 95.0], [65.0, 95.0], [65.1, 96.0], [65.2, 96.0], [65.3, 97.0], [65.4, 98.0], [65.5, 98.0], [65.6, 99.0], [65.7, 100.0], [65.8, 100.0], [65.9, 101.0], [66.0, 102.0], [66.1, 102.0], [66.2, 103.0], [66.3, 104.0], [66.4, 105.0], [66.5, 105.0], [66.6, 106.0], [66.7, 107.0], [66.8, 108.0], [66.9, 108.0], [67.0, 109.0], [67.1, 110.0], [67.2, 111.0], [67.3, 112.0], [67.4, 113.0], [67.5, 114.0], [67.6, 114.0], [67.7, 115.0], [67.8, 116.0], [67.9, 117.0], [68.0, 118.0], [68.1, 119.0], [68.2, 121.0], [68.3, 122.0], [68.4, 122.0], [68.5, 124.0], [68.6, 125.0], [68.7, 126.0], [68.8, 128.0], [68.9, 129.0], [69.0, 130.0], [69.1, 132.0], [69.2, 133.0], [69.3, 135.0], [69.4, 137.0], [69.5, 138.0], [69.6, 141.0], [69.7, 143.0], [69.8, 146.0], [69.9, 149.0], [70.0, 152.0], [70.1, 157.0], [70.2, 161.0], [70.3, 166.0], [70.4, 170.0], [70.5, 175.0], [70.6, 180.0], [70.7, 187.0], [70.8, 192.0], [70.9, 198.0], [71.0, 203.0], [71.1, 211.0], [71.2, 219.0], [71.3, 228.0], [71.4, 243.0], [71.5, 260.0], [71.6, 281.0], [71.7, 302.0], [71.8, 324.0], [71.9, 335.0], [72.0, 355.0], [72.1, 421.0], [72.2, 478.0], [72.3, 541.0], [72.4, 556.0], [72.5, 578.0], [72.6, 617.0], [72.7, 695.0], [72.8, 722.0], [72.9, 767.0], [73.0, 819.0], [73.1, 866.0], [73.2, 970.0], [73.3, 1030.0], [73.4, 1055.0], [73.5, 1091.0], [73.6, 1137.0], [73.7, 1227.0], [73.8, 1361.0], [73.9, 1412.0], [74.0, 1471.0], [74.1, 1505.0], [74.2, 1541.0], [74.3, 1586.0], [74.4, 1637.0], [74.5, 1675.0], [74.6, 1706.0], [74.7, 1731.0], [74.8, 1757.0], [74.9, 1789.0], [75.0, 1815.0], [75.1, 1827.0], [75.2, 1841.0], [75.3, 1850.0], [75.4, 1862.0], [75.5, 1874.0], [75.6, 1888.0], [75.7, 1898.0], [75.8, 1904.0], [75.9, 1912.0], [76.0, 1921.0], [76.1, 1929.0], [76.2, 1935.0], [76.3, 1940.0], [76.4, 1947.0], [76.5, 1952.0], [76.6, 1957.0], [76.7, 1963.0], [76.8, 1971.0], [76.9, 1976.0], [77.0, 1980.0], [77.1, 1986.0], [77.2, 1990.0], [77.3, 1994.0], [77.4, 1998.0], [77.5, 2004.0], [77.6, 2009.0], [77.7, 2014.0], [77.8, 2020.0], [77.9, 2026.0], [78.0, 2036.0], [78.1, 2043.0], [78.2, 2049.0], [78.3, 2056.0], [78.4, 2061.0], [78.5, 2068.0], [78.6, 2074.0], [78.7, 2080.0], [78.8, 2089.0], [78.9, 2098.0], [79.0, 2109.0], [79.1, 2122.0], [79.2, 2127.0], [79.3, 2136.0], [79.4, 2143.0], [79.5, 2152.0], [79.6, 2162.0], [79.7, 2173.0], [79.8, 2191.0], [79.9, 2205.0], [80.0, 2215.0], [80.1, 2229.0], [80.2, 2239.0], [80.3, 2244.0], [80.4, 2250.0], [80.5, 2260.0], [80.6, 2270.0], [80.7, 2279.0], [80.8, 2286.0], [80.9, 2299.0], [81.0, 2309.0], [81.1, 2318.0], [81.2, 2330.0], [81.3, 2339.0], [81.4, 2348.0], [81.5, 2360.0], [81.6, 2377.0], [81.7, 2391.0], [81.8, 2411.0], [81.9, 2423.0], [82.0, 2434.0], [82.1, 2446.0], [82.2, 2457.0], [82.3, 2461.0], [82.4, 2466.0], [82.5, 2470.0], [82.6, 2476.0], [82.7, 2482.0], [82.8, 2487.0], [82.9, 2492.0], [83.0, 2499.0], [83.1, 2508.0], [83.2, 2513.0], [83.3, 2521.0], [83.4, 2526.0], [83.5, 2535.0], [83.6, 2543.0], [83.7, 2553.0], [83.8, 2559.0], [83.9, 2574.0], [84.0, 2583.0], [84.1, 2594.0], [84.2, 2602.0], [84.3, 2611.0], [84.4, 2618.0], [84.5, 2626.0], [84.6, 2636.0], [84.7, 2643.0], [84.8, 2652.0], [84.9, 2659.0], [85.0, 2665.0], [85.1, 2673.0], [85.2, 2681.0], [85.3, 2689.0], [85.4, 2697.0], [85.5, 2710.0], [85.6, 2720.0], [85.7, 2728.0], [85.8, 2739.0], [85.9, 2751.0], [86.0, 2762.0], [86.1, 2771.0], [86.2, 2781.0], [86.3, 2791.0], [86.4, 2799.0], [86.5, 2808.0], [86.6, 2828.0], [86.7, 2843.0], [86.8, 2857.0], [86.9, 2869.0], [87.0, 2884.0], [87.1, 2903.0], [87.2, 2914.0], [87.3, 2926.0], [87.4, 2940.0], [87.5, 2955.0], [87.6, 2963.0], [87.7, 2976.0], [87.8, 2991.0], [87.9, 3001.0], [88.0, 3009.0], [88.1, 3020.0], [88.2, 3034.0], [88.3, 3050.0], [88.4, 3067.0], [88.5, 3085.0], [88.6, 3104.0], [88.7, 3118.0], [88.8, 3141.0], [88.9, 3170.0], [89.0, 3207.0], [89.1, 3249.0], [89.2, 3288.0], [89.3, 3310.0], [89.4, 3340.0], [89.5, 3368.0], [89.6, 3395.0], [89.7, 3422.0], [89.8, 3455.0], [89.9, 3497.0], [90.0, 3555.0], [90.1, 3598.0], [90.2, 3633.0], [90.3, 3697.0], [90.4, 3774.0], [90.5, 3826.0], [90.6, 3862.0], [90.7, 3925.0], [90.8, 3959.0], [90.9, 3997.0], [91.0, 4038.0], [91.1, 4086.0], [91.2, 4158.0], [91.3, 4186.0], [91.4, 4233.0], [91.5, 4278.0], [91.6, 4330.0], [91.7, 4406.0], [91.8, 4444.0], [91.9, 4471.0], [92.0, 4506.0], [92.1, 4546.0], [92.2, 4608.0], [92.3, 4670.0], [92.4, 4729.0], [92.5, 4797.0], [92.6, 4847.0], [92.7, 4876.0], [92.8, 4930.0], [92.9, 4965.0], [93.0, 5023.0], [93.1, 5072.0], [93.2, 5116.0], [93.3, 5170.0], [93.4, 5222.0], [93.5, 5265.0], [93.6, 5315.0], [93.7, 5384.0], [93.8, 5434.0], [93.9, 5481.0], [94.0, 5546.0], [94.1, 5600.0], [94.2, 5667.0], [94.3, 5737.0], [94.4, 5787.0], [94.5, 5825.0], [94.6, 5876.0], [94.7, 5928.0], [94.8, 5992.0], [94.9, 6026.0], [95.0, 6062.0], [95.1, 6098.0], [95.2, 6135.0], [95.3, 6172.0], [95.4, 6228.0], [95.5, 6278.0], [95.6, 6362.0], [95.7, 6441.0], [95.8, 6493.0], [95.9, 6567.0], [96.0, 6637.0], [96.1, 6774.0], [96.2, 6882.0], [96.3, 6955.0], [96.4, 7041.0], [96.5, 7147.0], [96.6, 7225.0], [96.7, 7323.0], [96.8, 7426.0], [96.9, 7484.0], [97.0, 7562.0], [97.1, 7671.0], [97.2, 7827.0], [97.3, 7947.0], [97.4, 8102.0], [97.5, 8265.0], [97.6, 8500.0], [97.7, 8747.0], [97.8, 9050.0], [97.9, 9491.0], [98.0, 9937.0], [98.1, 10248.0], [98.2, 10642.0], [98.3, 11008.0], [98.4, 11408.0], [98.5, 11865.0], [98.6, 12571.0], [98.7, 13328.0], [98.8, 14498.0], [98.9, 15599.0], [99.0, 16757.0], [99.1, 17771.0], [99.2, 18753.0], [99.3, 19995.0], [99.4, 20873.0], [99.5, 22405.0], [99.6, 26569.0], [99.7, 30267.0], [99.8, 33043.0], [99.9, 36996.0], [100.0, 64893.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 65678.0, "series": [{"data": [[0.0, 65678.0], [100.0, 5259.0], [32900.0, 2.0], [33300.0, 2.0], [34500.0, 3.0], [36100.0, 1.0], [34900.0, 2.0], [36500.0, 1.0], [36900.0, 15.0], [37300.0, 1.0], [37700.0, 1.0], [38100.0, 1.0], [38500.0, 3.0], [38900.0, 1.0], [39300.0, 1.0], [40100.0, 1.0], [42100.0, 1.0], [42900.0, 1.0], [44900.0, 1.0], [45300.0, 1.0], [46900.0, 1.0], [48100.0, 1.0], [200.0, 750.0], [51700.0, 1.0], [56900.0, 1.0], [300.0, 392.0], [400.0, 152.0], [500.0, 325.0], [600.0, 167.0], [700.0, 249.0], [800.0, 164.0], [900.0, 133.0], [1000.0, 271.0], [1100.0, 130.0], [1200.0, 80.0], [1300.0, 111.0], [1400.0, 231.0], [1500.0, 241.0], [1600.0, 252.0], [1700.0, 350.0], [1800.0, 798.0], [1900.0, 1704.0], [2000.0, 1478.0], [2100.0, 929.0], [2300.0, 829.0], [2200.0, 1061.0], [2400.0, 1271.0], [2500.0, 1159.0], [2600.0, 1252.0], [2700.0, 1000.0], [2800.0, 663.0], [2900.0, 804.0], [3000.0, 689.0], [3100.0, 410.0], [3300.0, 382.0], [3200.0, 267.0], [3400.0, 272.0], [3500.0, 211.0], [3600.0, 190.0], [3700.0, 144.0], [3800.0, 197.0], [3900.0, 266.0], [4000.0, 214.0], [4300.0, 148.0], [4200.0, 203.0], [4100.0, 215.0], [4600.0, 176.0], [4400.0, 293.0], [4500.0, 200.0], [4700.0, 142.0], [4800.0, 240.0], [5100.0, 191.0], [5000.0, 199.0], [4900.0, 215.0], [5300.0, 185.0], [5200.0, 213.0], [5500.0, 160.0], [5600.0, 150.0], [5400.0, 192.0], [5800.0, 187.0], [5700.0, 203.0], [5900.0, 182.0], [6100.0, 248.0], [6000.0, 281.0], [6200.0, 192.0], [6300.0, 104.0], [6400.0, 162.0], [6500.0, 144.0], [6600.0, 79.0], [6700.0, 98.0], [6900.0, 127.0], [6800.0, 86.0], [7100.0, 110.0], [7000.0, 115.0], [7200.0, 101.0], [7300.0, 113.0], [7400.0, 160.0], [7600.0, 73.0], [7500.0, 109.0], [7700.0, 44.0], [7900.0, 76.0], [7800.0, 91.0], [8100.0, 63.0], [8000.0, 61.0], [8200.0, 67.0], [8400.0, 45.0], [8300.0, 31.0], [8600.0, 35.0], [8500.0, 49.0], [8700.0, 24.0], [9100.0, 23.0], [8900.0, 38.0], [9000.0, 40.0], [8800.0, 33.0], [9200.0, 17.0], [9400.0, 22.0], [9500.0, 25.0], [9300.0, 20.0], [9600.0, 17.0], [9700.0, 14.0], [10000.0, 44.0], [10100.0, 21.0], [9900.0, 44.0], [9800.0, 26.0], [10200.0, 18.0], [10400.0, 29.0], [10300.0, 15.0], [10600.0, 44.0], [10500.0, 23.0], [10700.0, 25.0], [10900.0, 30.0], [11000.0, 27.0], [11100.0, 28.0], [11200.0, 22.0], [10800.0, 24.0], [11400.0, 29.0], [11700.0, 24.0], [11500.0, 17.0], [11600.0, 19.0], [11300.0, 19.0], [11900.0, 21.0], [11800.0, 25.0], [12100.0, 19.0], [12200.0, 8.0], [12000.0, 15.0], [12400.0, 14.0], [12600.0, 14.0], [12300.0, 9.0], [12700.0, 11.0], [12500.0, 10.0], [13000.0, 12.0], [13100.0, 14.0], [13200.0, 15.0], [12800.0, 15.0], [12900.0, 13.0], [13300.0, 4.0], [13400.0, 6.0], [13800.0, 6.0], [13600.0, 12.0], [13500.0, 10.0], [13700.0, 11.0], [14200.0, 4.0], [13900.0, 5.0], [14000.0, 8.0], [14100.0, 11.0], [14300.0, 11.0], [14600.0, 14.0], [14700.0, 10.0], [14800.0, 24.0], [14500.0, 9.0], [14400.0, 13.0], [14900.0, 10.0], [15100.0, 11.0], [15200.0, 6.0], [15000.0, 5.0], [15300.0, 3.0], [15700.0, 3.0], [15500.0, 3.0], [15400.0, 5.0], [15800.0, 6.0], [15600.0, 2.0], [16100.0, 1.0], [16200.0, 5.0], [16300.0, 5.0], [16000.0, 16.0], [15900.0, 20.0], [17000.0, 12.0], [17400.0, 6.0], [16600.0, 6.0], [17200.0, 21.0], [16800.0, 2.0], [16400.0, 1.0], [17800.0, 7.0], [18200.0, 11.0], [18400.0, 13.0], [18000.0, 9.0], [17600.0, 5.0], [19000.0, 20.0], [18600.0, 9.0], [19200.0, 5.0], [18800.0, 20.0], [19400.0, 4.0], [20000.0, 18.0], [20400.0, 5.0], [19800.0, 5.0], [20200.0, 22.0], [19600.0, 3.0], [20800.0, 15.0], [21400.0, 2.0], [21200.0, 4.0], [21000.0, 7.0], [20600.0, 3.0], [22000.0, 10.0], [21800.0, 8.0], [22400.0, 6.0], [21600.0, 7.0], [22200.0, 7.0], [23000.0, 4.0], [23400.0, 3.0], [22800.0, 2.0], [24400.0, 4.0], [23600.0, 2.0], [24200.0, 3.0], [23800.0, 2.0], [25000.0, 1.0], [25400.0, 1.0], [25200.0, 3.0], [25600.0, 3.0], [26200.0, 5.0], [26400.0, 5.0], [26000.0, 8.0], [27000.0, 1.0], [27200.0, 1.0], [27400.0, 3.0], [27600.0, 2.0], [27800.0, 4.0], [28600.0, 2.0], [28200.0, 3.0], [28000.0, 1.0], [28400.0, 1.0], [29400.0, 6.0], [29600.0, 6.0], [29200.0, 8.0], [28800.0, 1.0], [29000.0, 2.0], [30400.0, 8.0], [29800.0, 4.0], [30600.0, 9.0], [30200.0, 19.0], [30000.0, 2.0], [30800.0, 1.0], [31200.0, 5.0], [31000.0, 1.0], [31400.0, 1.0], [32600.0, 1.0], [32400.0, 1.0], [36800.0, 33.0], [36000.0, 3.0], [37200.0, 8.0], [37600.0, 2.0], [38000.0, 3.0], [38800.0, 2.0], [39200.0, 1.0], [39600.0, 1.0], [42000.0, 3.0], [55200.0, 1.0], [56800.0, 1.0], [58400.0, 1.0], [62000.0, 1.0], [64000.0, 3.0], [64800.0, 1.0], [34700.0, 4.0], [36700.0, 33.0], [37500.0, 2.0], [37100.0, 2.0], [38300.0, 1.0], [39500.0, 2.0], [39900.0, 4.0], [41500.0, 3.0], [41900.0, 5.0], [41100.0, 1.0], [44700.0, 1.0], [49500.0, 2.0], [51900.0, 1.0], [60700.0, 1.0], [61900.0, 1.0], [16500.0, 11.0], [16900.0, 5.0], [16700.0, 43.0], [17100.0, 9.0], [17300.0, 4.0], [18300.0, 5.0], [17900.0, 13.0], [17700.0, 19.0], [17500.0, 1.0], [18100.0, 5.0], [18500.0, 11.0], [19100.0, 5.0], [18900.0, 18.0], [19300.0, 1.0], [18700.0, 24.0], [20100.0, 18.0], [19500.0, 7.0], [20300.0, 3.0], [19900.0, 2.0], [21500.0, 8.0], [21300.0, 7.0], [20900.0, 1.0], [20500.0, 6.0], [20700.0, 10.0], [21100.0, 8.0], [21900.0, 12.0], [22100.0, 12.0], [22500.0, 6.0], [21700.0, 1.0], [22300.0, 4.0], [22900.0, 4.0], [22700.0, 3.0], [23500.0, 3.0], [23100.0, 1.0], [23900.0, 4.0], [24100.0, 2.0], [23700.0, 6.0], [24300.0, 2.0], [25300.0, 1.0], [24700.0, 1.0], [25500.0, 2.0], [25100.0, 6.0], [24900.0, 1.0], [26300.0, 1.0], [25700.0, 4.0], [26500.0, 4.0], [25900.0, 2.0], [26700.0, 2.0], [27100.0, 1.0], [26900.0, 2.0], [27700.0, 5.0], [27900.0, 3.0], [28300.0, 9.0], [28500.0, 3.0], [29100.0, 1.0], [29500.0, 3.0], [29300.0, 10.0], [30300.0, 14.0], [29700.0, 3.0], [30500.0, 19.0], [30100.0, 2.0], [30700.0, 2.0], [30900.0, 10.0], [31300.0, 3.0], [31100.0, 1.0], [31900.0, 3.0], [32100.0, 1.0], [34600.0, 3.0], [33000.0, 5.0], [37000.0, 9.0], [37800.0, 5.0], [38600.0, 1.0], [39400.0, 1.0], [41000.0, 4.0], [42600.0, 1.0], [46200.0, 1.0], [45800.0, 1.0], [52600.0, 4.0], [53000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 64800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1366.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 71722.0, "series": [{"data": [[0.0, 71722.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1366.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21878.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5034.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 381.3234295050942, "minX": 1.64570058E12, "maxY": 660.4100886162236, "series": [{"data": [[1.64570064E12, 660.4100886162236], [1.6457007E12, 634.1173209385624], [1.64570058E12, 436.0104168687329], [1.64570076E12, 381.3234295050942]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64570076E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.75, "minX": 1.0, "maxY": 28400.307692307688, "series": [{"data": [[2.0, 1.0444444444444445], [3.0, 559.3283582089553], [4.0, 266.48979591836735], [5.0, 5.25], [6.0, 140.3023255813954], [7.0, 0.75], [8.0, 735.5555555555557], [9.0, 0.7540983606557377], [10.0, 991.3571428571428], [11.0, 0.90625], [12.0, 0.846153846153846], [13.0, 1514.5], [14.0, 4.363636363636363], [15.0, 1.2222222222222223], [16.0, 1.4444444444444444], [17.0, 1.588235294117647], [18.0, 1.2884615384615388], [19.0, 1.238095238095238], [20.0, 2088.78947368421], [21.0, 1.9499999999999997], [22.0, 1.6666666666666667], [23.0, 1.076923076923077], [24.0, 1.8157894736842108], [25.0, 1.1630434782608694], [26.0, 1.2040816326530617], [27.0, 7175.428571428572], [28.0, 4.333333333333334], [29.0, 1.1111111111111112], [30.0, 1.760869565217391], [31.0, 1.5], [33.0, 1.5909090909090908], [32.0, 1.6666666666666665], [35.0, 1.8571428571428572], [34.0, 1.4000000000000001], [37.0, 2.03125], [36.0, 1.9285714285714286], [39.0, 2.578947368421053], [38.0, 3.0], [41.0, 4.666666666666667], [40.0, 2599.35], [43.0, 2.7142857142857144], [42.0, 2.15], [45.0, 1.4285714285714286], [44.0, 2.6], [47.0, 1.6249999999999998], [46.0, 1.4], [49.0, 1.4705882352941178], [48.0, 2.1000000000000005], [51.0, 2.0380952380952384], [50.0, 1.862068965517241], [53.0, 2.6190476190476186], [52.0, 1.75], [55.0, 3.035714285714286], [54.0, 2.333333333333334], [57.0, 2.8235294117647065], [56.0, 2.75], [59.0, 3.437499999999999], [58.0, 2.7499999999999996], [61.0, 8.0], [60.0, 2168.8787878787875], [63.0, 2.7222222222222223], [62.0, 4.0], [67.0, 2.0625000000000004], [66.0, 1.5454545454545456], [65.0, 1.7714285714285714], [64.0, 1.3333333333333333], [70.0, 1.615384615384615], [69.0, 1.6666666666666665], [68.0, 1.6666666666666667], [75.0, 2.166666666666667], [74.0, 2.076923076923076], [73.0, 1.7631578947368418], [72.0, 1.6530612244897958], [79.0, 2.230769230769231], [78.0, 3.3333333333333335], [77.0, 1.8888888888888888], [76.0, 2.5333333333333337], [83.0, 869.0804597701147], [82.0, 3.5], [81.0, 3.4761904761904754], [80.0, 2.5909090909090913], [87.0, 2.4], [86.0, 1.1428571428571428], [85.0, 2.0], [84.0, 2.6842105263157894], [91.0, 1.8571428571428572], [90.0, 2.2195121951219514], [89.0, 1.3043478260869568], [88.0, 1.3888888888888888], [95.0, 0.75], [94.0, 1018.2941176470587], [93.0, 1.7499999999999998], [92.0, 1.5757575757575755], [99.0, 53.83950617283952], [98.0, 488.29999999999984], [97.0, 0.8863636363636364], [96.0, 3.1538461538461537], [103.0, 3.0], [102.0, 5.0], [101.0, 2.4999999999999996], [100.0, 109.8412698412699], [107.0, 1.6666666666666667], [106.0, 2.4545454545454546], [105.0, 1.7142857142857142], [104.0, 1.8333333333333335], [111.0, 2.2068965517241383], [110.0, 2.0], [109.0, 2.0], [108.0, 1.7999999999999998], [115.0, 3.0], [114.0, 2.833333333333333], [113.0, 2.454545454545455], [119.0, 3.5], [118.0, 3.533333333333333], [117.0, 3.2727272727272725], [116.0, 2.5999999999999996], [123.0, 4.571428571428571], [122.0, 4.136363636363637], [121.0, 3.0], [120.0, 3.63265306122449], [127.0, 6.333333333333333], [126.0, 4.8421052631578965], [125.0, 4.555555555555555], [124.0, 6.0], [135.0, 9.8], [134.0, 5.842105263157895], [133.0, 5.5], [132.0, 4.333333333333334], [130.0, 4.5], [129.0, 6.5], [128.0, 7.5], [143.0, 5.5], [142.0, 5.279999999999999], [141.0, 6.222222222222222], [140.0, 13.0], [139.0, 5.0588235294117645], [138.0, 3.0], [137.0, 5.0], [136.0, 3.0], [151.0, 6.291666666666666], [150.0, 6.0], [149.0, 5.0], [148.0, 9.11111111111111], [147.0, 4.6], [146.0, 15.8], [145.0, 7.0], [144.0, 6.538461538461538], [158.0, 8.10416666666667], [157.0, 8.276923076923076], [156.0, 5.083333333333333], [155.0, 5.0], [153.0, 5.656249999999999], [152.0, 5.962962962962964], [167.0, 11.875000000000002], [165.0, 16.133333333333333], [164.0, 12.722222222222221], [163.0, 13.2], [162.0, 14.425], [161.0, 13.818181818181818], [160.0, 14.0], [175.0, 10.749999999999998], [173.0, 11.666666666666666], [172.0, 9.5], [171.0, 15.0], [170.0, 12.138888888888891], [169.0, 10.0], [168.0, 11.833333333333332], [183.0, 22.540000000000003], [182.0, 10.625000000000002], [181.0, 10.8125], [180.0, 11.538461538461538], [179.0, 7.0], [178.0, 11.727272727272727], [177.0, 10.75], [176.0, 10.0], [185.0, 26.303571428571427], [186.0, 42.76923076923077], [189.0, 38.91620111731848], [190.0, 69.45205479452055], [191.0, 59.78571428571426], [188.0, 15.791044776119403], [187.0, 17.888888888888882], [184.0, 23.4], [193.0, 23.437499999999996], [194.0, 62.4], [197.0, 13.811320754716983], [198.0, 12.942857142857143], [199.0, 14.714285714285715], [196.0, 12.842105263157894], [195.0, 8.0], [192.0, 12.840000000000002], [202.0, 13.605263157894738], [206.0, 13.66666666666667], [207.0, 14.38888888888889], [205.0, 12.799999999999999], [204.0, 11.8], [203.0, 20.1], [201.0, 12.808219178082194], [200.0, 10.9], [208.0, 20.2], [210.0, 3.5], [212.0, 2.5], [213.0, 9.600000000000001], [214.0, 13.999999999999998], [215.0, 8.473684210526317], [209.0, 12.2], [216.0, 2.1333333333333333], [217.0, 2.0], [218.0, 2.466666666666667], [219.0, 9.285714285714285], [220.0, 13.26315789473684], [221.0, 3.3333333333333335], [222.0, 13.288629737609334], [223.0, 150.43243243243242], [228.0, 7.666666666666666], [227.0, 21.333333333333332], [226.0, 11.5], [224.0, 16.571428571428562], [231.0, 20.0], [230.0, 17.815789473684205], [229.0, 21.521739130434785], [225.0, 20.500000000000004], [236.0, 6.333333333333333], [232.0, 22.875], [239.0, 20.999999999999996], [238.0, 18.577464788732396], [237.0, 15.571428571428571], [235.0, 16.0], [234.0, 20.076923076923077], [233.0, 21.333333333333332], [247.0, 5.0], [245.0, 18.53846153846154], [243.0, 22.0], [246.0, 23.42105263157895], [244.0, 26.75], [242.0, 28.25], [241.0, 24.79545454545454], [240.0, 23.0], [254.0, 13.777777777777779], [253.0, 16.476190476190478], [252.0, 6.0], [249.0, 19.065217391304344], [255.0, 29.0], [251.0, 18.846153846153847], [250.0, 22.23076923076923], [248.0, 22.5], [269.0, 20.176470588235293], [270.0, 26.769230769230774], [262.0, 10.777777777777779], [261.0, 19.200000000000003], [260.0, 20.0], [257.0, 17.750000000000004], [263.0, 25.75], [256.0, 16.42857142857143], [271.0, 16.000000000000004], [268.0, 23.5], [259.0, 23.666666666666668], [258.0, 22.526315789473685], [267.0, 23.833333333333336], [266.0, 24.88888888888889], [265.0, 23.999999999999996], [287.0, 29.73076923076923], [275.0, 24.0], [273.0, 16.0], [274.0, 19.428571428571427], [272.0, 21.76470588235294], [279.0, 19.633333333333333], [278.0, 17.444444444444443], [277.0, 18.53846153846154], [276.0, 21.25], [284.0, 28.1530612244898], [281.0, 7.0], [280.0, 19.25], [286.0, 31.8135593220339], [285.0, 32.84615384615385], [283.0, 26.125000000000004], [282.0, 21.08219178082192], [289.0, 47.95209059233444], [288.0, 28.209905660377338], [291.0, 47.89890109890115], [290.0, 32.8523489932886], [301.0, 28.184357541899438], [300.0, 23.638743455497387], [303.0, 38.81102362204726], [302.0, 26.518282988871228], [292.0, 44.45045045045044], [293.0, 48.215639810426545], [294.0, 46.201826045170556], [295.0, 38.8825910931174], [296.0, 40.921232876712345], [297.0, 39.70705521472393], [299.0, 52.58604651162793], [298.0, 147.35555555555558], [305.0, 27.173611111111125], [304.0, 21.073995771670155], [306.0, 29.531908488862175], [307.0, 45.390099009901014], [308.0, 20.43589743589743], [309.0, 21.95955056179776], [310.0, 21.942825112107613], [311.0, 14.721818181818175], [315.0, 15.844696969696972], [318.0, 12.966887417218542], [319.0, 14.527472527472527], [312.0, 15.966233766233756], [313.0, 15.267409470752089], [314.0, 16.07794676806085], [316.0, 15.942028985507244], [317.0, 22.7327935222672], [320.0, 23.38271604938272], [323.0, 23.286624203821646], [332.0, 189.27160493827154], [333.0, 26.576754385964875], [334.0, 68.50678733031674], [335.0, 57.19298245614036], [324.0, 35.07232937685452], [322.0, 19.00549450549451], [321.0, 25.240223463687165], [325.0, 35.060842433697374], [327.0, 20.249999999999993], [328.0, 33.18716701413015], [329.0, 158.7692307692306], [330.0, 51.10672514619884], [331.0, 160.992665036675], [326.0, 36.40983606557377], [348.0, 21.12121212121212], [343.0, 44.56551724137931], [342.0, 57.82028469750887], [344.0, 42.337797619047734], [351.0, 33.760000000000005], [350.0, 23.651162790697676], [349.0, 71.14285714285714], [345.0, 64.7232323232323], [346.0, 45.11633466135459], [347.0, 22.328313253012034], [339.0, 22.76190476190476], [338.0, 29.759856630824384], [337.0, 18.34782608695652], [336.0, 35.734693877551024], [341.0, 33.26315789473684], [340.0, 58.894736842105274], [366.0, 30.666666666666664], [367.0, 31.320000000000004], [365.0, 41.0], [364.0, 30.15], [363.0, 41.0], [362.0, 47.308270676691734], [361.0, 53.07547169811322], [360.0, 43.44366197183099], [359.0, 28.906249999999993], [353.0, 27.08695652173913], [352.0, 23.25], [355.0, 58.22727272727271], [354.0, 25.799999999999997], [358.0, 25.675675675675677], [357.0, 25.300000000000004], [356.0, 33.70700636942677], [381.0, 28.799999999999997], [383.0, 81.66129032258063], [380.0, 57.10843373493974], [371.0, 80.6], [370.0, 33.083333333333336], [369.0, 27.25], [368.0, 31.676056338028175], [379.0, 31.42857142857143], [378.0, 43.790055248618785], [377.0, 35.30232558139535], [376.0, 88.76923076923077], [375.0, 31.484848484848484], [374.0, 33.18421052631579], [372.0, 33.0], [398.0, 30.705882352941167], [399.0, 29.94285714285714], [397.0, 31.890243902439032], [396.0, 247.99999999999997], [395.0, 70.35999999999999], [394.0, 29.026315789473692], [393.0, 31.625], [392.0, 28.61764705882353], [391.0, 46.74107142857144], [385.0, 29.372549019607845], [384.0, 38.086956521739125], [387.0, 31.991228070175417], [386.0, 47.38235294117647], [390.0, 29.192307692307693], [389.0, 55.886363636363626], [388.0, 236.72727272727272], [414.0, 27.93506493506493], [415.0, 23.0], [413.0, 45.839285714285715], [412.0, 46.07142857142856], [411.0, 150.94274809160305], [410.0, 34.837837837837824], [409.0, 38.54545454545454], [408.0, 31.85714285714285], [407.0, 33.0], [401.0, 22.0], [400.0, 30.384615384615387], [403.0, 29.263157894736842], [402.0, 26.833333333333336], [406.0, 30.9], [405.0, 31.13157894736842], [404.0, 31.67355371900824], [430.0, 33.94736842105263], [431.0, 29.08823529411765], [429.0, 39.464646464646464], [428.0, 35.523809523809526], [427.0, 36.18000000000002], [426.0, 36.02857142857143], [425.0, 91.11363636363637], [424.0, 37.5], [423.0, 39.27692307692308], [417.0, 33.519999999999996], [416.0, 26.230769230769226], [419.0, 33.56818181818182], [418.0, 31.999999999999996], [422.0, 32.59322033898305], [421.0, 29.052631578947366], [420.0, 102.44444444444446], [446.0, 42.857142857142854], [447.0, 42.8029197080292], [445.0, 37.9375], [444.0, 36.622950819672134], [443.0, 31.5], [442.0, 38.045454545454554], [441.0, 39.79069767441862], [440.0, 43.64705882352941], [439.0, 48.91666666666667], [433.0, 42.8], [432.0, 36.45454545454545], [435.0, 133.66666666666669], [434.0, 37.98850574712643], [438.0, 118.5], [437.0, 39.05555555555556], [436.0, 41.14953271028036], [462.0, 39.04255319148936], [463.0, 41.550000000000004], [461.0, 44.758620689655174], [460.0, 44.75], [459.0, 42.25806451612904], [458.0, 44.52380952380953], [457.0, 68.39999999999996], [456.0, 45.71111111111111], [455.0, 44.53333333333333], [449.0, 42.00000000000001], [448.0, 84.10714285714285], [451.0, 46.85714285714286], [450.0, 223.2857142857143], [454.0, 44.10526315789473], [453.0, 40.78723404255319], [452.0, 43.58333333333333], [479.0, 66.10526315789475], [472.0, 173.28571428571428], [478.0, 29.944444444444443], [477.0, 41.10769230769232], [475.0, 42.125], [474.0, 58.0], [473.0, 45.0], [471.0, 47.99999999999999], [464.0, 37.04444444444443], [467.0, 40.381818181818176], [466.0, 43.50515463917528], [470.0, 42.999999999999986], [469.0, 43.888888888888886], [468.0, 41.333333333333336], [493.0, 405.04], [483.0, 322.8], [494.0, 339.4655172413795], [495.0, 30.0], [492.0, 66.875], [491.0, 57.535714285714285], [490.0, 54.705882352941174], [487.0, 39.416058394160586], [481.0, 39.09090909090909], [480.0, 37.32142857142857], [486.0, 35.888888888888886], [485.0, 25.5], [484.0, 27.666666666666668], [489.0, 37.30882352941177], [510.0, 75.82051282051282], [496.0, 544.6666666666666], [499.0, 45.26086956521739], [503.0, 34.411764705882355], [502.0, 40.89473684210525], [501.0, 39.33333333333333], [500.0, 72.12114537444937], [511.0, 65.26923076923077], [509.0, 125.40740740740739], [508.0, 103.84821428571429], [507.0, 55.83333333333334], [506.0, 213.17647058823528], [505.0, 60.3293650793651], [504.0, 59.373333333333306], [540.0, 2743.720930232557], [543.0, 1876.6249999999998], [529.0, 84.27027027027027], [528.0, 80.74358974358974], [531.0, 156.60576923076914], [530.0, 105.45390070921987], [533.0, 222.54545454545456], [532.0, 327.9666666666666], [542.0, 1989.0204081632658], [541.0, 2113.3333333333335], [539.0, 3071.333333333334], [538.0, 2085.9255319148947], [537.0, 2089.565517241379], [536.0, 3444.0924855491317], [527.0, 579.0212765957446], [512.0, 144.125], [515.0, 183.525], [513.0, 80.33333333333333], [517.0, 121.0396039603961], [516.0, 82.75], [519.0, 113.66666666666667], [518.0, 99.33333333333333], [526.0, 88.68421052631578], [525.0, 177.3387096774194], [524.0, 86.72602739726028], [523.0, 163.4814814814815], [522.0, 145.26666666666665], [521.0, 93.44680851063826], [520.0, 87.0], [535.0, 1388.3958333333333], [534.0, 637.1505376344085], [572.0, 5066.169642857145], [575.0, 3613.0076923076917], [561.0, 2649.0], [560.0, 4453.973895582328], [563.0, 6969.54166666667], [562.0, 3057.052631578947], [565.0, 4524.0293255132], [564.0, 10767.298701298698], [574.0, 2921.8653846153843], [573.0, 2832.647058823529], [571.0, 4217.622222222221], [570.0, 6566.942857142856], [569.0, 6317.062992125986], [568.0, 6283.283505154638], [559.0, 6295.0357142857165], [545.0, 2201.8780487804875], [544.0, 2116.6188118811897], [547.0, 3143.0], [546.0, 1877.909090909091], [549.0, 2104.1864406779655], [548.0, 1948.3333333333333], [551.0, 2182.0638297872324], [550.0, 1968.0], [558.0, 3348.7000000000003], [557.0, 3732.295081967213], [556.0, 2733.0400000000004], [555.0, 3963.1929824561394], [554.0, 2076.6333333333337], [553.0, 2651.432835820896], [552.0, 2702.4846153846156], [567.0, 6349.079903147697], [566.0, 4715.607142857142], [602.0, 5113.652173913044], [606.0, 1140.4568965517244], [598.0, 4635.757812499997], [599.0, 3741.278481012658], [597.0, 4248.01923076923], [607.0, 763.6029411764705], [592.0, 4100.657051282054], [594.0, 4927.625592417059], [593.0, 4659.17959183674], [596.0, 4864.339999999999], [595.0, 4963.0], [605.0, 1459.3333333333333], [604.0, 1890.1923076923072], [603.0, 3855.8970588235297], [601.0, 5338.818181818181], [600.0, 5943.525], [591.0, 1996.0], [577.0, 17372.509803921566], [576.0, 7649.160839160838], [579.0, 4043.4105691056916], [578.0, 5885.333333333334], [581.0, 3696.2657004830903], [580.0, 3116.945652173913], [583.0, 2652.0000000000005], [582.0, 2194.400000000001], [590.0, 2978.264705882353], [589.0, 2388.8688524590175], [588.0, 2265.4294478527613], [587.0, 2415.5679012345677], [586.0, 2729.790322580646], [585.0, 2511.428571428571], [584.0, 2489.4090909090905], [633.0, 59.471428571428575], [638.0, 1153.9104477611943], [639.0, 355.64912280701753], [625.0, 214.85342019543978], [624.0, 152.56643356643363], [627.0, 102.93725490196081], [626.0, 81.9607843137255], [629.0, 81.48910891089106], [628.0, 78.34453781512609], [637.0, 1489.400000000001], [635.0, 262.90691489361717], [634.0, 93.57794676806083], [632.0, 93.42662116040947], [615.0, 75.62686567164178], [614.0, 66.46666666666665], [613.0, 71.02173913043477], [612.0, 79.26315789473682], [611.0, 97.4351851851851], [610.0, 140.66929133858272], [609.0, 100.56321839080461], [608.0, 282.47413793103453], [623.0, 187.3934426229508], [622.0, 86.66666666666667], [621.0, 135.16], [620.0, 176.46184738955833], [619.0, 133.19230769230774], [618.0, 34.0], [617.0, 89.77056277056282], [616.0, 64.53676470588236], [631.0, 73.53025936599424], [630.0, 96.68378378378381], [665.0, 28400.307692307688], [669.0, 1521.5633802816903], [671.0, 342.2699386503072], [657.0, 2629.1661891117456], [656.0, 3238.7507788162034], [659.0, 5495.663628076573], [658.0, 5084.370637785794], [661.0, 9751.122891566267], [660.0, 13980.830601092892], [668.0, 2262.685314685316], [667.0, 3732.6190476190473], [666.0, 4903.556962025316], [664.0, 8269.832031250005], [647.0, 741.8969404186812], [646.0, 49.66666666666667], [645.0, 632.8387096774195], [644.0, 862.8953488372093], [643.0, 776.294888597641], [642.0, 502.6263520157325], [641.0, 279.9624060150375], [640.0, 845.8740740740734], [655.0, 7676.98954443614], [654.0, 4490.371675053924], [653.0, 3447.6708268330735], [652.0, 2734.576923076924], [651.0, 2541.0879120879126], [650.0, 2422.6397260273966], [649.0, 1863.1087378640775], [648.0, 709.3035439137141], [663.0, 6100.293522267202], [662.0, 4717.079985119044], [700.0, 410.7007299270073], [673.0, 230.59469696969688], [674.0, 148.26609442060084], [675.0, 178.53072625698334], [677.0, 185.2248062015504], [676.0, 162.6803986710959], [679.0, 337.2440944881891], [678.0, 569.950819672131], [697.0, 167.96363636363637], [696.0, 1617.2750000000003], [699.0, 99.22222222222219], [698.0, 660.6181818181819], [684.0, 423.18705035971226], [683.0, 2843.488151658766], [682.0, 2160.1764705882347], [681.0, 372.16129032258067], [680.0, 1661.6774193548388], [685.0, 108.78095238095237], [686.0, 1036.0704225352113], [687.0, 250.4476082004556], [672.0, 68.23255813953487], [703.0, 139.0], [689.0, 85.71428571428572], [688.0, 70.23809523809523], [691.0, 721.6947368421054], [690.0, 800.1340388007052], [693.0, 111.3076923076923], [692.0, 108.85714285714286], [695.0, 82.80555555555554], [694.0, 221.01612903225814], [702.0, 141.37681159420293], [701.0, 204.35], [733.0, 2758.815789473684], [727.0, 227.90384615384616], [726.0, 53.0], [725.0, 44.833333333333336], [724.0, 51.57142857142857], [723.0, 44.54545454545454], [722.0, 64.28571428571423], [721.0, 81.21333333333334], [720.0, 36.79439252336447], [735.0, 2505.702127659574], [734.0, 2603.1111111111118], [732.0, 2676.818181818182], [731.0, 3116.9106529209625], [730.0, 2388.536585365853], [729.0, 1822.756862745099], [728.0, 747.8297872340426], [711.0, 124.18181818181819], [710.0, 340.45583038869256], [709.0, 428.92207792207773], [708.0, 377.8298319327728], [707.0, 229.83333333333331], [706.0, 49.15730337078651], [705.0, 273.35546038543896], [704.0, 302.32], [719.0, 40.93750000000001], [718.0, 645.1836734693878], [717.0, 531.6269841269839], [716.0, 692.9347826086955], [715.0, 781.6775510204085], [714.0, 50.3888888888889], [713.0, 53.68548387096777], [712.0, 1776.6470588235295], [764.0, 3124.6792452830186], [767.0, 4709.2307692307695], [753.0, 3137.222222222222], [752.0, 3331.8846153846152], [755.0, 3533.1724137931033], [754.0, 3494.350877192982], [757.0, 3841.493243243244], [756.0, 3148.5178571428555], [766.0, 2969.5], [765.0, 2627.0], [763.0, 4279.54], [762.0, 9731.666666666666], [761.0, 3388.726890756305], [760.0, 3617.428571428571], [751.0, 4410.628571428572], [737.0, 2414.2635658914737], [736.0, 2736.9440559440573], [739.0, 2851.172995780592], [738.0, 3380.433333333334], [741.0, 2961.9861111111118], [740.0, 2907.1818181818176], [743.0, 2945.396396396397], [742.0, 3082.000000000001], [750.0, 3674.4135338345855], [749.0, 3528.3737373737363], [748.0, 3078.150000000001], [747.0, 3446.191011235955], [746.0, 3118.1288343558285], [745.0, 3121.157024793389], [744.0, 3069.0666666666675], [759.0, 4137.787878787879], [758.0, 3660.2531645569625], [772.0, 2396.081180811808], [771.0, 3348.625], [769.0, 3454.5], [768.0, 4880.850715746426], [1.0, 1.6875000000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[475.12755999999973, 1282.7019199999904]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 772.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14384.2, "minX": 1.64570058E12, "maxY": 227620.86666666667, "series": [{"data": [[1.64570064E12, 31087.683333333334], [1.6457007E12, 76460.4], [1.64570058E12, 227620.86666666667], [1.64570076E12, 102323.96666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64570064E12, 14384.2], [1.6457007E12, 35105.0], [1.64570058E12, 101383.63333333333], [1.64570076E12, 45681.73333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64570076E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 419.8481503753573, "minX": 1.64570058E12, "maxY": 5753.001499659167, "series": [{"data": [[1.64570064E12, 5753.001499659167], [1.6457007E12, 2157.332250658], [1.64570058E12, 419.8481503753573], [1.64570076E12, 1113.8518295566946]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64570076E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 418.6537797520885, "minX": 1.64570058E12, "maxY": 5692.467893660533, "series": [{"data": [[1.64570064E12, 5692.467893660533], [1.6457007E12, 2148.083440667536], [1.64570058E12, 418.6537797520885], [1.64570076E12, 1090.0807068839433]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64570076E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 13.003123120793083, "minX": 1.64570058E12, "maxY": 683.2332651670034, "series": [{"data": [[1.64570064E12, 683.2332651670034], [1.6457007E12, 273.9579996639971], [1.64570058E12, 13.003123120793083], [1.64570076E12, 123.23876682289219]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64570076E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64570058E12, "maxY": 51798.0, "series": [{"data": [[1.64570064E12, 51798.0], [1.6457007E12, 34773.0], [1.64570058E12, 32958.0], [1.64570076E12, 37234.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64570064E12, 8458.0], [1.6457007E12, 4965.0], [1.64570058E12, 2917.0], [1.64570076E12, 2021.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64570064E12, 25631.0], [1.6457007E12, 14825.859999999997], [1.64570058E12, 8023.410000000094], [1.64570076E12, 7146.780000000035]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64570064E12, 11690.75], [1.6457007E12, 7399.0], [1.64570058E12, 3392.0], [1.64570076E12, 2502.800000000003]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64570064E12, 1456.0], [1.6457007E12, 1.0], [1.64570058E12, 1.0], [1.64570076E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64570064E12, 3545.5], [1.6457007E12, 87.0], [1.64570058E12, 81.0], [1.64570076E12, 31.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64570076E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 27.0, "maxY": 64039.0, "series": [{"data": [[27.0, 2235.0], [32.0, 5027.0], [36.0, 6629.5], [38.0, 9383.0], [40.0, 4456.5], [42.0, 6175.0], [45.0, 4622.0], [44.0, 4175.5], [46.0, 4833.0], [47.0, 3937.0], [51.0, 4730.0], [53.0, 2683.0], [56.0, 6816.0], [58.0, 1903.5], [60.0, 5000.5], [61.0, 4514.5], [62.0, 4029.5], [71.0, 6991.0], [68.0, 6186.0], [69.0, 1654.5], [73.0, 4928.0], [72.0, 3246.5], [78.0, 4813.0], [77.0, 4795.0], [76.0, 9157.0], [80.0, 4049.0], [81.0, 5701.0], [82.0, 5413.0], [85.0, 8876.5], [86.0, 7719.0], [91.0, 4473.0], [89.0, 6125.0], [90.0, 10506.5], [88.0, 4282.0], [94.0, 3519.0], [93.0, 6038.0], [95.0, 4876.0], [96.0, 6323.0], [97.0, 5481.0], [98.0, 7361.5], [100.0, 3309.0], [103.0, 5734.0], [102.0, 2961.5], [101.0, 4469.0], [104.0, 1443.0], [107.0, 5037.5], [106.0, 11439.0], [108.0, 5025.0], [109.0, 9296.0], [110.0, 8996.5], [115.0, 3249.0], [114.0, 3267.0], [119.0, 3503.0], [122.0, 4965.0], [123.0, 9588.0], [120.0, 6310.5], [124.0, 4378.0], [126.0, 1909.5], [135.0, 3351.5], [129.0, 2578.0], [133.0, 3085.0], [132.0, 6296.0], [130.0, 5792.0], [131.0, 2556.0], [134.0, 5366.0], [139.0, 2928.0], [143.0, 2266.0], [141.0, 6329.5], [142.0, 2142.0], [138.0, 4045.0], [136.0, 4697.0], [148.0, 3025.0], [145.0, 2843.0], [150.0, 2068.5], [144.0, 7585.0], [147.0, 4433.0], [158.0, 2807.0], [154.0, 2300.0], [159.0, 8795.0], [152.0, 7572.0], [156.0, 2729.0], [166.0, 2862.5], [161.0, 4418.0], [167.0, 2771.0], [163.0, 2339.0], [170.0, 2883.0], [173.0, 2715.0], [169.0, 3012.5], [174.0, 2558.5], [183.0, 3397.0], [182.0, 2624.0], [178.0, 2200.5], [179.0, 2468.0], [177.0, 1.0], [187.0, 2631.0], [185.0, 2745.5], [191.0, 2657.0], [188.0, 2213.0], [190.0, 12013.0], [189.0, 1972.5], [196.0, 1774.5], [193.0, 1845.0], [197.0, 2317.0], [205.0, 2298.5], [200.0, 2557.0], [206.0, 2069.0], [211.0, 2287.0], [210.0, 2004.0], [212.0, 2650.0], [217.0, 1711.0], [221.0, 1941.0], [216.0, 2609.5], [218.0, 2120.0], [231.0, 1923.0], [227.0, 2065.0], [225.0, 2166.0], [233.0, 2127.0], [246.0, 1963.5], [242.0, 2508.5], [243.0, 2070.0], [259.0, 2070.0], [261.0, 1916.5], [275.0, 2431.0], [282.0, 2260.5], [279.0, 1965.0], [386.0, 11.0], [747.0, 1.0], [1181.0, 5.0], [1612.0, 59.0], [1690.0, 2.0], [2623.0, 18.0], [2859.0, 36.0], [3064.0, 25.0], [3366.0, 24.0], [3554.0, 42.0], [3703.0, 15.0], [3679.0, 15.0], [3638.0, 67.0], [4140.0, 23.0], [4294.0, 13.0], [4196.0, 23.0], [4334.0, 83.0], [5114.0, 80.0], [5580.0, 46.0], [6531.0, 58.0], [7728.0, 26.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3638.0, 350.0], [4334.0, 30506.0], [5114.0, 15095.5], [5580.0, 159.0], [6531.0, 605.5], [32.0, 29917.5], [44.0, 3527.0], [46.0, 5883.0], [47.0, 3925.0], [53.0, 2820.0], [56.0, 3754.0], [61.0, 4837.0], [62.0, 64039.0], [68.0, 4665.5], [69.0, 2319.0], [71.0, 2512.0], [73.0, 1854.0], [77.0, 2770.0], [76.0, 6142.0], [82.0, 69.0], [80.0, 25807.5], [85.0, 2668.0], [86.0, 3244.0], [91.0, 3109.0], [90.0, 4274.5], [88.0, 156.5], [89.0, 1073.0], [94.0, 13427.0], [97.0, 2537.0], [96.0, 2867.5], [98.0, 4562.5], [100.0, 2963.0], [103.0, 15147.0], [101.0, 23700.0], [106.0, 4182.0], [107.0, 1794.0], [104.0, 4532.0], [109.0, 5928.0], [110.0, 3867.0], [114.0, 1993.0], [115.0, 39626.0], [119.0, 52657.0], [122.0, 19657.0], [123.0, 3311.0], [120.0, 2504.5], [124.0, 4758.0], [133.0, 61981.0], [132.0, 12201.0], [130.0, 5159.0], [134.0, 1519.0], [141.0, 1973.0], [142.0, 21074.5], [138.0, 17618.0], [136.0, 38583.5], [150.0, 3331.5], [145.0, 39952.5], [144.0, 3861.0], [148.0, 21559.0], [159.0, 4489.0], [152.0, 3950.0], [154.0, 22453.0], [156.0, 2855.0], [161.0, 36795.0], [167.0, 5776.0], [169.0, 55264.0], [173.0, 4408.0], [177.0, 13278.0], [188.0, 3216.0], [190.0, 5251.0], [191.0, 18802.0], [189.0, 37844.0], [205.0, 835.0], [200.0, 20088.0], [206.0, 21272.5], [211.0, 20189.0], [212.0, 40085.0], [221.0, 21975.0], [225.0, 41334.5], [231.0, 20850.5], [246.0, 34953.5], [261.0, 20818.0], [282.0, 33542.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7728.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 27.0, "maxY": 64039.0, "series": [{"data": [[27.0, 2235.0], [32.0, 5027.0], [36.0, 6629.5], [38.0, 9383.0], [40.0, 4456.5], [42.0, 6175.0], [45.0, 4622.0], [44.0, 4175.5], [46.0, 4833.0], [47.0, 3937.0], [51.0, 4730.0], [53.0, 2683.0], [56.0, 6816.0], [58.0, 1903.5], [60.0, 5000.5], [61.0, 4514.5], [62.0, 4029.5], [71.0, 6991.0], [68.0, 6186.0], [69.0, 1654.5], [73.0, 4928.0], [72.0, 3246.5], [78.0, 4813.0], [77.0, 4795.0], [76.0, 9157.0], [80.0, 4049.0], [81.0, 5701.0], [82.0, 5413.0], [85.0, 8876.5], [86.0, 7719.0], [91.0, 4473.0], [89.0, 6125.0], [90.0, 10506.5], [88.0, 4282.0], [94.0, 3519.0], [93.0, 6038.0], [95.0, 4876.0], [96.0, 6323.0], [97.0, 5481.0], [98.0, 7361.5], [100.0, 3309.0], [103.0, 5734.0], [102.0, 2961.5], [101.0, 4469.0], [104.0, 1443.0], [107.0, 5037.0], [106.0, 11439.0], [108.0, 5025.0], [109.0, 9296.0], [110.0, 8996.5], [115.0, 3249.0], [114.0, 3267.0], [119.0, 3503.0], [122.0, 4965.0], [123.0, 9588.0], [120.0, 6310.5], [124.0, 4377.5], [126.0, 1909.5], [135.0, 3351.5], [129.0, 2578.0], [133.0, 3085.0], [132.0, 6296.0], [130.0, 5792.0], [131.0, 2556.0], [134.0, 5366.0], [139.0, 2928.0], [143.0, 2266.0], [141.0, 6329.5], [142.0, 2142.0], [138.0, 4045.0], [136.0, 4697.0], [148.0, 3025.0], [145.0, 2843.0], [150.0, 2068.5], [144.0, 7585.0], [147.0, 4433.0], [158.0, 2807.0], [154.0, 2300.0], [159.0, 8795.0], [152.0, 7572.0], [156.0, 2729.0], [166.0, 2862.5], [161.0, 4418.0], [167.0, 2771.0], [163.0, 2339.0], [170.0, 2883.0], [173.0, 2715.0], [169.0, 3012.5], [174.0, 2558.5], [183.0, 3397.0], [182.0, 2624.0], [178.0, 2200.5], [179.0, 2468.0], [177.0, 1.0], [187.0, 2631.0], [185.0, 2745.5], [191.0, 2657.0], [188.0, 2213.0], [190.0, 12013.0], [189.0, 1972.5], [196.0, 1774.5], [193.0, 1845.0], [197.0, 2317.0], [205.0, 2298.5], [200.0, 2557.0], [206.0, 2069.0], [211.0, 2287.0], [210.0, 2004.0], [212.0, 2650.0], [217.0, 1711.0], [221.0, 1941.0], [216.0, 2609.5], [218.0, 2120.0], [231.0, 1923.0], [227.0, 2065.0], [225.0, 2166.0], [233.0, 2127.0], [246.0, 1963.5], [242.0, 2508.5], [243.0, 2070.0], [259.0, 2070.0], [261.0, 1916.5], [275.0, 2431.0], [282.0, 2260.5], [279.0, 1965.0], [386.0, 11.0], [747.0, 1.0], [1181.0, 5.0], [1612.0, 59.0], [1690.0, 2.0], [2623.0, 16.0], [2859.0, 34.0], [3064.0, 23.0], [3366.0, 24.0], [3554.0, 42.0], [3703.0, 14.0], [3679.0, 14.0], [3638.0, 67.0], [4140.0, 22.0], [4294.0, 13.0], [4196.0, 23.0], [4334.0, 83.0], [5114.0, 80.0], [5580.0, 46.0], [6531.0, 58.0], [7728.0, 26.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3638.0, 350.0], [4334.0, 30506.0], [5114.0, 15091.5], [5580.0, 159.0], [6531.0, 605.5], [32.0, 29917.5], [44.0, 3527.0], [46.0, 5883.0], [47.0, 3925.0], [53.0, 2820.0], [56.0, 3754.0], [61.0, 4837.0], [62.0, 64039.0], [68.0, 4665.5], [69.0, 2318.0], [71.0, 2511.0], [73.0, 1854.0], [77.0, 2770.0], [76.0, 6142.0], [82.0, 69.0], [80.0, 18257.0], [85.0, 2668.0], [86.0, 3207.0], [91.0, 3044.0], [90.0, 4274.0], [88.0, 156.5], [89.0, 1073.0], [94.0, 4614.0], [97.0, 2537.0], [96.0, 2867.5], [98.0, 4561.5], [100.0, 2963.0], [103.0, 0.0], [101.0, 23700.0], [106.0, 4182.0], [107.0, 1793.5], [104.0, 4507.0], [109.0, 5928.0], [110.0, 3867.0], [114.0, 1993.0], [115.0, 39626.0], [119.0, 52657.0], [122.0, 19657.0], [123.0, 3311.0], [120.0, 2504.0], [124.0, 4758.0], [133.0, 61981.0], [132.0, 12197.0], [130.0, 5159.0], [134.0, 1519.0], [141.0, 1973.0], [142.0, 0.0], [138.0, 17618.0], [136.0, 38583.5], [150.0, 3331.5], [145.0, 39952.5], [144.0, 3861.0], [148.0, 21559.0], [159.0, 4489.0], [152.0, 3946.0], [154.0, 3572.0], [156.0, 2855.0], [161.0, 36795.0], [167.0, 5775.0], [169.0, 55264.0], [173.0, 4408.0], [177.0, 13278.0], [188.0, 3216.0], [190.0, 5251.0], [191.0, 18802.0], [189.0, 37844.0], [205.0, 835.0], [200.0, 0.0], [206.0, 0.0], [211.0, 0.0], [212.0, 40085.0], [221.0, 21975.0], [225.0, 41334.5], [231.0, 0.0], [246.0, 34953.5], [261.0, 0.0], [282.0, 23495.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7728.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 122.05, "minX": 1.64570058E12, "maxY": 870.3166666666667, "series": [{"data": [[1.64570064E12, 122.05], [1.6457007E12, 296.5], [1.64570058E12, 870.3166666666667], [1.64570076E12, 377.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64570076E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.64570058E12, "maxY": 858.3, "series": [{"data": [[1.64570064E12, 94.56666666666666], [1.6457007E12, 260.6166666666667], [1.64570058E12, 858.3], [1.64570076E12, 369.28333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64570064E12, 27.333333333333332], [1.6457007E12, 36.88333333333333], [1.64570058E12, 0.8833333333333333], [1.64570076E12, 17.85]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.64570064E12, 0.35], [1.6457007E12, 0.11666666666666667], [1.64570076E12, 0.48333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64570076E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.64570058E12, "maxY": 858.3, "series": [{"data": [[1.64570064E12, 94.56666666666666], [1.6457007E12, 260.6166666666667], [1.64570058E12, 858.3], [1.64570076E12, 369.28333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.64570064E12, 27.683333333333334], [1.6457007E12, 37.0], [1.64570058E12, 0.8833333333333333], [1.64570076E12, 18.333333333333332]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64570076E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.64570058E12, "maxY": 858.3, "series": [{"data": [[1.64570064E12, 94.56666666666666], [1.6457007E12, 260.6166666666667], [1.64570058E12, 858.3], [1.64570076E12, 369.28333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.64570064E12, 27.683333333333334], [1.6457007E12, 37.0], [1.64570058E12, 0.8833333333333333], [1.64570076E12, 18.333333333333332]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64570076E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

